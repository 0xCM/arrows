### cmpeq
-------------------------------------------------------------------------------
docs: __m128 _mm_cmpeq_ss (__m128 a, __m128 b) CMPSS xmm, xmm/m32, imm8(0)
clr-sig: Vector128<float> CompareEqualScalar(Vector128<float> left, Vector128<float> right);

docs: __m128d _mm_cmpeq_sd (__m128d a, __m128d b) CMPSD xmm, xmm/m64, imm8(0)
clr-sig: Vector128<double> CompareEqualScalar(Vector128<double> left, Vector128<double> right);

docs: __m128i _mm_cmpeq_epi8 (__m128i a, __m128i b) PCMPEQB xmm, xmm/m128
clr-sig: Vector128<sbyte> CompareEqual(Vector128<sbyte> left, Vector128<sbyte> right);
clr-sig: Vector128<byte> CompareEqual(Vector128<byte> left, Vector128<byte> right);

docs: __m128i _mm_cmpeq_epi16 (__m128i a, __m128i b) PCMPEQW xmm, xmm/m128
clr-sig: Vector128<short> CompareEqual(Vector128<short> left, Vector128<short> right);
clr-sig: Vector128<ushort> CompareEqual(Vector128<ushort> left, Vector128<ushort> right);

docs: __m128i _mm_cmpeq_epi32 (__m128i a, __m128i b) PCMPEQD xmm, xmm/m128
clr-sig: Vector128<int> CompareEqual(Vector128<int> left, Vector128<int> right);
clr-sig: Vector128<uint> CompareEqual(Vector128<uint> left, Vector128<uint> right);

docs: __m128i _mm_cmpeq_epi64 (__m128i a, __m128i b) PCMPEQQ xmm, xmm/m128
clr-sig: Vector128<long> CompareEqual(Vector128<long> left, Vector128<long> right);
clr-sig: Vector128<ulong> CompareEqual(Vector128<ulong> left, Vector128<ulong> right);

docs: __m128 _mm_cmpeq_ps (__m128 a, __m128 b) CMPPS xmm, xmm/m128, imm8(0)
clr-sig: Vector128<float> CompareEqual(Vector128<float> left, Vector128<float> right);

docs: __m128d _mm_cmpeq_pd (__m128d a, __m128d b) CMPPD xmm, xmm/m128, imm8(0)
clr-sig: Vector128<double> CompareEqual(Vector128<double> left, Vector128<double> right);

docs: __m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256
clr-sig: Vector256<uint> CompareEqual(Vector256<uint> left, Vector256<uint> right);
    
docs: __m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256
clr-sig: Vector256<ushort> CompareEqual(Vector256<ushort> left, Vector256<ushort> right);
    
docs: __m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> CompareEqual(Vector256<sbyte> left, Vector256<sbyte> right);
    
docs: __m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256
clr-sig: Vector256<ulong> CompareEqual(Vector256<ulong> left, Vector256<ulong> right);
    
docs: __m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256
clr-sig: Vector256<int> CompareEqual(Vector256<int> left, Vector256<int> right);

    
docs: __m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256
clr-sig: Vector256<short> CompareEqual(Vector256<short> left, Vector256<short> right);

    
docs: __m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256
clr-sig: Vector256<byte> CompareEqual(Vector256<byte> left, Vector256<byte> right);

    
docs: __m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256
clr-sig: Vector256<long> CompareEqual(Vector256<long> left, Vector256<long> right);

### loaddup
-------------------------------------------------------------------------------
docs: __m128d _mm_loaddup_pd (double const* mem_addr) MOVDDUP xmm, m64
clr-sig: Vector128<double> LoadAndDuplicateToVector128(double* address);
clr-sig: Vector128<ulong> LoadDquVector128(ulong* address);
clr-sig: Vector128<uint> LoadDquVector128(uint* address);
clr-sig: Vector128<ushort> LoadDquVector128(ushort* address);
clr-sig: Vector128<long> LoadDquVector128(long* address);
clr-sig: Vector128<short> LoadDquVector128(short* address);
clr-sig: Vector128<byte> LoadDquVector128(byte* address);


### testz ---------------------------------------------------------------------

docs: int _mm_testz_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128
clr-sig: bool TestZ(Vector128<float> left, Vector128<float> right);

docs: int _mm_testz_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128
clr-sig: bool TestZ(Vector128<double> left, Vector128<double> right);

docs: int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256
clr-sig: bool TestZ(Vector256<sbyte> left, Vector256<sbyte> right);
clr-sig: bool TestZ(Vector256<byte> left, Vector256<byte> right);
clr-sig: bool TestZ(Vector256<short> left, Vector256<short> right);
clr-sig: bool TestZ(Vector256<ushort> left, Vector256<ushort> right);
clr-sig: bool TestZ(Vector256<ulong> left, Vector256<ulong> right);
clr-sig: bool TestZ(Vector256<int> left, Vector256<int> right);
clr-sig: bool TestZ(Vector256<uint> left, Vector256<uint> right);
clr-sig: bool TestZ(Vector256<long> left, Vector256<long> right);

docs: int _mm256_testz_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256
clr-sig: bool TestZ(Vector256<float> left, Vector256<float> right);

docs: int _mm256_testz_pd (__m256d a, __m256d b) VTESTPD ymm, ymm/m256
clr-sig: bool TestZ(Vector256<double> left, Vector256<double> right);

### unpacklo
-------------------------------------------------------------------------------
docs: __m128i _mm_unpacklo_epi8 (__m128i a, __m128i b) PUNPCKLBW xmm, xmm/m128
clr-sig: Vector128<sbyte> UnpackLow(Vector128<sbyte> left, Vector128<sbyte> right);
clr-sig: Vector128<byte> UnpackLow(Vector128<byte> left, Vector128<byte> right);

docs: __m128i _mm_unpacklo_epi16 (__m128i a, __m128i b) PUNPCKLWD xmm, xmm/m128
clr-sig: Vector128<short> UnpackLow(Vector128<short> left, Vector128<short> right);
clr-sig: Vector128<ushort> UnpackLow(Vector128<ushort> left, Vector128<ushort> right);

docs: __m128i _mm_unpacklo_epi64 (__m128i a, __m128i b) PUNPCKLQDQ xmm, xmm/m128
clr-sig: Vector128<long> UnpackLow(Vector128<long> left, Vector128<long> right);
clr-sig: Vector128<ulong> UnpackLow(Vector128<ulong> left, Vector128<ulong> right);

docs: __m128i _mm_unpacklo_epi32 (__m128i a, __m128i b) PUNPCKLDQ xmm, xmm/m128
clr-sig: Vector128<int> UnpackLow(Vector128<int> left, Vector128<int> right);
clr-sig: Vector128<uint> UnpackLow(Vector128<uint> left, Vector128<uint> right);

docs: __m128 _mm_unpacklo_ps (__m128 a, __m128 b) UNPCKLPS xmm, xmm/m128
clr-sig: Vector128<float> UnpackLow(Vector128<float> left, Vector128<float> right);

docs: __m128d _mm_unpacklo_pd (__m128d a, __m128d b) UNPCKLPD xmm, xmm/m128
clr-sig: Vector128<double> UnpackLow(Vector128<double> left, Vector128<double> right);

docs: __m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b) VPUNPCKLBW ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> UnpackLow(Vector256<sbyte> left, Vector256<sbyte> right);
clr-sig: Vector256<byte> UnpackLow(Vector256<byte> left, Vector256<byte> right);

docs: __m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b) VPUNPCKLWD ymm, ymm, ymm/m256
clr-sig: Vector256<short> UnpackLow(Vector256<short> left, Vector256<short> right);
clr-sig: Vector256<ushort> UnpackLow(Vector256<ushort> left, Vector256<ushort> right);
    
docs: __m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b) VPUNPCKLDQ ymm, ymm, ymm/m256
clr-sig: Vector256<int> UnpackLow(Vector256<int> left, Vector256<int> right);
clr-sig: Vector256<uint> UnpackLow(Vector256<uint> left, Vector256<uint> right);

docs: __m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b) VPUNPCKLQDQ ymm, ymm, ymm/m256
clr-sig: Vector256<long> UnpackLow(Vector256<long> left, Vector256<long> right);
clr-sig: Vector256<ulong> UnpackLow(Vector256<ulong> left, Vector256<ulong> right);

docs: __m256 _mm256_unpacklo_ps (__m256 a, __m256 b) VUNPCKLPS ymm, ymm, ymm/m256
clr-sig: Vector256<float> UnpackLow(Vector256<float> left, Vector256<float> right);

docs: __m256d _mm256_unpacklo_pd (__m256d a, __m256d b) VUNPCKLPD ymm, ymm, ymm/m256
clr-sig: Vector256<double> UnpackLow(Vector256<double> left, Vector256<double> right);

#### unpackhi
-------------------------------------------------------------------------------
docs: __m128i _mm_unpackhi_epi8 (__m128i a, __m128i b) PUNPCKHBW xmm, xmm/m128
clr-sig: Vector128<sbyte> UnpackHigh(Vector128<sbyte> left, Vector128<sbyte> right);
clr-sig: Vector128<byte> UnpackHigh(Vector128<byte> left, Vector128<byte> right);

docs: __m128i _mm_unpackhi_epi32 (__m128i a, __m128i b) PUNPCKHDQ xmm, xmm/m128
clr-sig: Vector128<uint> UnpackHigh(Vector128<uint> left, Vector128<uint> right);
clr-sig: Vector128<int> UnpackHigh(Vector128<int> left, Vector128<int> right);

docs: __m128i _mm_unpackhi_epi16 (__m128i a, __m128i b) PUNPCKHWD xmm, xmm/m128
clr-sig: Vector128<ushort> UnpackHigh(Vector128<ushort> left, Vector128<ushort> right);
clr-sig: Vector128<short> UnpackHigh(Vector128<short> left, Vector128<short> right);

docs: __m128i _mm_unpackhi_epi64 (__m128i a, __m128i b) PUNPCKHQDQ xmm, xmm/m128
clr-sig: Vector128<long> UnpackHigh(Vector128<long> left, Vector128<long> right);
clr-sig: Vector128<ulong> UnpackHigh(Vector128<ulong> left, Vector128<ulong> right);

docs: __m128 _mm_unpackhi_ps (__m128 a, __m128 b) UNPCKHPS xmm, xmm/m128
clr-sig: Vector128<float> UnpackHigh(Vector128<float> left, Vector128<float> right);

docs: __m128d _mm_unpackhi_pd (__m128d a, __m128d b) UNPCKHPD xmm, xmm/m128
clr-sig: Vector128<double> UnpackHigh(Vector128<double> left, Vector128<double> right);

docs: __m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b) VPUNPCKHBW ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> UnpackHigh(Vector256<sbyte> left, Vector256<sbyte> right);
clr-sig: Vector256<byte> UnpackHigh(Vector256<byte> left, Vector256<byte> right);

docs: __m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b) VPUNPCKHWD ymm, ymm, ymm/m256
clr-sig: Vector256<short> UnpackHigh(Vector256<short> left, Vector256<short> right);
clr-sig: Vector256<ushort> UnpackHigh(Vector256<ushort> left, Vector256<ushort> right);
    
docs: __m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b) VPUNPCKHDQ ymm, ymm, ymm/m256
clr-sig: Vector256<int> UnpackHigh(Vector256<int> left, Vector256<int> right);
clr-sig: Vector256<uint> UnpackHigh(Vector256<uint> left, Vector256<uint> right);

docs: __m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b) VPUNPCKHQDQ ymm, ymm, ymm/m256
clr-sig: Vector256<ulong> UnpackHigh(Vector256<ulong> left, Vector256<ulong> right);
clr-sig: Vector256<long> UnpackHigh(Vector256<long> left, Vector256<long> right);

docs: __m256 _mm256_unpackhi_ps (__m256 a, __m256 b) VUNPCKHPS ymm, ymm, ymm/m256
clr-sig: Vector256<float> UnpackHigh(Vector256<float> left, Vector256<float> right);

docs: __m256d _mm256_unpackhi_pd (__m256d a, __m256d b) VUNPCKHPD ymm, ymm, ymm/m256
clr-sig: Vector256<double> UnpackHigh(Vector256<double> left, Vector256<double> right);

### shuffle
-------------------------------------------------------------------------------
docs: __m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128
clr-sig: Vector128<byte> Shuffle(Vector128<byte> value, Vector128<byte> mask);
clr-sig: Vector128<sbyte> Shuffle(Vector128<sbyte> value, Vector128<sbyte> mask);

docs: __m128i _mm_shuffle_epi32 (__m128i a, int immediate) PSHUFD xmm, xmm/m128, imm8
clr-sig: Vector128<int> Shuffle(Vector128<int> value, byte control);
clr-sig: Vector128<uint> Shuffle(Vector128<uint> value, byte control);

docs: __m128 _mm_shuffle_ps (__m128 a, __m128 b, unsigned int control) SHUFPS xmm, xmm/m128, imm8
clr-sig: Vector128<float> Shuffle(Vector128<float> left, Vector128<float> right, byte control);

docs: __m128d _mm_shuffle_pd (__m128d a, __m128d b, int immediate) SHUFPD xmm, xmm/m128, imm8
clr-sig: Vector128<double> Shuffle(Vector128<double> left, Vector128<double> right, byte control);

docs: __m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> Shuffle(Vector256<sbyte> value, Vector256<sbyte> mask);
clr-sig: Vector256<byte> Shuffle(Vector256<byte> value, Vector256<byte> mask);

docs: __m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8
clr-sig: Vector256<int> Shuffle(Vector256<int> value, byte control);
clr-sig: Vector256<uint> Shuffle(Vector256<uint> value, byte control);

docs: __m256d _mm256_shuffle_pd (__m256d a, __m256d b, const int imm8) VSHUFPD ymm, ymm, ymm/m256, imm8
clr-sig: Vector256<double> Shuffle(Vector256<double> value, Vector256<double> right, byte control);

docs: __m256 _mm256_shuffle_ps (__m256 a, __m256 b, const int imm8) VSHUFPS ymm, ymm, ymm/m256, imm8
clr-sig: Vector256<float> Shuffle(Vector256<float> value, Vector256<float> right, byte control);
        
docs: __m128i _mm_shufflehi_epi16 (__m128i a, int immediate) PSHUFHW xmm, xmm/m128, imm8
clr-sig: Vector128<short> ShuffleHigh(Vector128<short> value, byte control);
clr-sig: Vector128<ushort> ShuffleHigh(Vector128<ushort> value, byte control);

docs: __m128i _mm_shufflelo_epi16 (__m128i a, int control) PSHUFLW xmm, xmm/m128, imm8
clr-sig: Vector128<short> ShuffleLow(Vector128<short> value, byte control);
clr-sig: Vector128<ushort> ShuffleLow(Vector128<ushort> value, byte control);
    
docs: __m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8) VPSHUFHW ymm, ymm/m256, imm8
clr-sig: Vector256<ushort> ShuffleHigh(Vector256<ushort> value, byte control);
clr-sig: Vector256<short> ShuffleHigh(Vector256<short> value, byte control);
    
docs: __m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8) VPSHUFLW ymm, ymm/m256, imm8
clr-sig: Vector256<short> ShuffleLow(Vector256<short> value, byte control);
clr-sig: Vector256<ushort> ShuffleLow(Vector256<ushort> value, byte control);


### addsub
-------------------------------------------------------------------------------
docs: __m128d _mm_addsub_pd (__m128d a, __m128d b) ADDSUBPD xmm, xmm/m128
clr-sig: Vector128<double> AddSubtract(Vector128<double> left, Vector128<double> right);

docs: __m256d _mm256_addsub_pd (__m256d a, __m256d b) VADDSUBPD ymm, ymm, ymm/m256
clr-sig: Vector256<double> AddSubtract(Vector256<double> left, Vector256<double> right);


docs: __m256 _mm256_addsub_ps (__m256 a, __m256 b) VADDSUBPS ymm, ymm, ymm/m256
clr-sig: Vector256<float> AddSubtract(Vector256<float> left, Vector256<float> right);

docs: __m128 _mm_addsub_ps (__m128 a, __m128 b) ADDSUBPS xmm, xmm/m128
clr-sig: Vector128<float> AddSubtract(Vector128<float> left, Vector128<float> right);


### abs
-------------------------------------------------------------------------------

docs: __m128i _mm_abs_epi8 (__m128i a) PABSB xmm, xmm/m128
clr-sig: Vector128<byte> Abs(Vector128<sbyte> value);

docs: __m128i _mm_abs_epi16 (__m128i a) PABSW xmm, xmm/m128
clr-sig: Vector128<ushort> Abs(Vector128<short> value);

docs: __m128i _mm_abs_epi32 (__m128i a) PABSD xmm, xmm/m128
clr-sig: Vector128<uint> Abs(Vector128<int> value);

docs: __m256i _mm256_abs_epi8 (__m256i a) VPABSB ymm, ymm/m256
clr-sig: Vector256<byte> Abs(Vector256<sbyte> value);

docs: __m256i _mm256_abs_epi16 (__m256i a) VPABSW ymm, ymm/m256
clr-sig: Vector256<ushort> Abs(Vector256<short> value);
    
docs: __m256i _mm256_abs_epi32 (__m256i a) VPABSD ymm, ymm/m256
clr-sig: Vector256<uint> Abs(Vector256<int> value);

### add
-------------------------------------------------------------------------------


docs: __m128i _mm_add_epi8 (__m128i a, __m128i b) PADDB xmm, xmm/m128
clr-sig: Vector128<sbyte> Add(Vector128<sbyte> left, Vector128<sbyte> right);
clr-sig: Vector128<byte> Add(Vector128<byte> left, Vector128<byte> right);

docs: __m128i _mm_add_epi64 (__m128i a, __m128i b) PADDQ xmm, xmm/m128
clr-sig: Vector128<long> Add(Vector128<long> left, Vector128<long> right);
clr-sig: Vector128<ulong> Add(Vector128<ulong> left, Vector128<ulong> right);

docs: __m128i _mm_add_epi32 (__m128i a, __m128i b) PADDD xmm, xmm/m128
clr-sig: Vector128<int> Add(Vector128<int> left, Vector128<int> right);
clr-sig: Vector128<uint> Add(Vector128<uint> left, Vector128<uint> right);

docs: __m128i _mm_add_epi16 (__m128i a, __m128i b) PADDW xmm, xmm/m128
clr-sig: Vector128<ushort> Add(Vector128<ushort> left, Vector128<ushort> right);
clr-sig: Vector128<short> Add(Vector128<short> left, Vector128<short> right);


docs: __m128 _mm_add_ss (__m128 a, __m128 b) ADDSS xmm, xmm/m32
clr-sig: Vector128<float> AddScalar(Vector128<float> left, Vector128<float> right);

docs: __m128 _mm_add_ps (__m128 a, __m128 b) ADDPS xmm, xmm/m128
clr-sig: Vector128<float> Add(Vector128<float> left, Vector128<float> right);

docs: __m128d _mm_add_pd (__m128d a, __m128d b) ADDPD xmm, xmm/m128
clr-sig: Vector128<double> Add(Vector128<double> left, Vector128<double> right);

docs: __m128d _mm_add_sd (__m128d a, __m128d b) ADDSD xmm, xmm/m64
clr-sig: Vector128<double> AddScalar(Vector128<double> left, Vector128<double> right);

docs: __m256i _mm256_add_epi8 (__m256i a, __m256i b) VPADDB ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> Add(Vector256<sbyte> left, Vector256<sbyte> right);
clr-sig: Vector256<byte> Add(Vector256<byte> left, Vector256<byte> right);
    
docs: __m256i _mm256_add_epi16 (__m256i a, __m256i b) VPADDW ymm, ymm, ymm/m256
clr-sig: Vector256<short> Add(Vector256<short> left, Vector256<short> right);
clr-sig: Vector256<ushort> Add(Vector256<ushort> left, Vector256<ushort> right);
    
docs: __m256i _mm256_add_epi32 (__m256i a, __m256i b) VPADDD ymm, ymm, ymm/m256
clr-sig: Vector256<int> Add(Vector256<int> left, Vector256<int> right);
clr-sig: Vector256<uint> Add(Vector256<uint> left, Vector256<uint> right);
    
docs: __m256i _mm256_add_epi64 (__m256i a, __m256i b) VPADDQ ymm, ymm, ymm/m256
clr-sig: Vector256<long> Add(Vector256<long> left, Vector256<long> right);
clr-sig: Vector256<ulong> Add(Vector256<ulong> left, Vector256<ulong> right);
    
docs: __m256d _mm256_add_pd (__m256d a, __m256d b) VADDPD ymm, ymm, ymm/m256
clr-sig: Vector256<double> Add(Vector256<double> left, Vector256<double> right);

docs: __m256 _mm256_add_ps (__m256 a, __m256 b) VADDPS ymm, ymm, ymm/m256
clr-sig: Vector256<float> Add(Vector256<float> left, Vector256<float> right);


### madduubs
-------------------------------------------------------------------------------
docs: __m128i _mm_maddubs_epi16 (__m128i a, __m128i b) PMADDUBSW xmm, xmm/m128
clr-sig: Vector128<short> MultiplyAddAdjacent(Vector128<byte> left, Vector128<sbyte> right);

docs: __m256i _mm256_maddubs_epi16 (__m256i a, __m256i b) VPMADDUBSW ymm, ymm, ymm/m256
clr-sig: Vector256<short> MultiplyAddAdjacent(Vector256<byte> left, Vector256<sbyte> right);

### andnot
-------------------------------------------------------------------------------

docs: __m128 _mm_andnot_ps (__m128 a, __m128 b) ANDNPS xmm, xmm/m128
clr-sig: Vector128<float> AndNot(Vector128<float> left, Vector128<float> right);

docs: __m128i _mm_andnot_si128 (__m128i a, __m128i b) PANDN xmm, xmm/m128
clr-sig: Vector128<ulong> AndNot(Vector128<ulong> left, Vector128<ulong> right);
clr-sig: Vector128<uint> AndNot(Vector128<uint> left, Vector128<uint> right);
clr-sig: Vector128<ushort> AndNot(Vector128<ushort> left, Vector128<ushort> right);
clr-sig: Vector128<sbyte> AndNot(Vector128<sbyte> left, Vector128<sbyte> right);
clr-sig: Vector128<long> AndNot(Vector128<long> left, Vector128<long> right);
clr-sig: Vector128<short> AndNot(Vector128<short> left, Vector128<short> right);
clr-sig: Vector128<byte> AndNot(Vector128<byte> left, Vector128<byte> right);
clr-sig: Vector128<int> AndNot(Vector128<int> left, Vector128<int> right);

docs: __m128d _mm_andnot_pd (__m128d a, __m128d b) ADDNPD xmm, xmm/m128
clr-sig: Vector128<double> AndNot(Vector128<double> left, Vector128<double> right);

docs: __m256d _mm256_andnot_pd (__m256d a, __m256d b) VANDNPD ymm, ymm, ymm/m256
clr-sig: Vector256<double> AndNot(Vector256<double> left, Vector256<double> right);

docs: __m256 _mm256_andnot_ps (__m256 a, __m256 b) VANDNPS ymm, ymm, ymm/m256
clr-sig: Vector256<float> AndNot(Vector256<float> left, Vector256<float> right);

docs: __m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256
clr-sig: Vector256<sbyte> AndNot(Vector256<sbyte> left, Vector256<sbyte> right);
clr-sig: Vector256<byte> AndNot(Vector256<byte> left, Vector256<byte> right);
clr-sig: Vector256<short> AndNot(Vector256<short> left, Vector256<short> right);
clr-sig: Vector256<ushort> AndNot(Vector256<ushort> left, Vector256<ushort> right);
clr-sig: Vector256<int> AndNot(Vector256<int> left, Vector256<int> right);
clr-sig: Vector256<uint> AndNot(Vector256<uint> left, Vector256<uint> right);
clr-sig: Vector256<long> AndNot(Vector256<long> left, Vector256<long> right);
clr-sig: Vector256<ulong> AndNot(Vector256<ulong> left, Vector256<ulong> right);

### insert

-------------------------------------------------------------------------------
docs: __m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8
clr-sig: Vector128<byte> Insert(Vector128<byte> value, byte data, byte index);
clr-sig: Vector128<sbyte> Insert(Vector128<sbyte> value, sbyte data, byte index);

docs: __m128i _mm_insert_epi16 (__m128i a, int i, int immediate) PINSRW xmm, reg/m16, imm8
clr-sig: Vector128<short> Insert(Vector128<short> value, short data, byte index);
clr-sig: Vector128<ushort> Insert(Vector128<ushort> value, ushort data, byte index);

docs: __m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, imm8
clr-sig: Vector128<uint> Insert(Vector128<uint> value, uint data, byte index);
clr-sig: Vector128<int> Insert(Vector128<int> value, int data, byte index);

docs:     __m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64, imm8 
clr-sig: Vector128<long> Insert(Vector128<long> value, long data, byte index);
clr-sig: Vector128<ulong> Insert(Vector128<ulong> value, ulong data, byte index);
    
docs: __m128 _mm_insert_ps (__m128 a, __m128 b, const int imm8) INSERTPS xmm, xmm/m32, imm8
clr-sig: Vector128<float> Insert(Vector128<float> value, Vector128<float> data, byte index);

### insertf128
-------------------------------------------------------------------------------

docs: __m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<sbyte> InsertVector128(Vector256<sbyte> value, Vector128<sbyte> data, byte index);
clr-sig: Vector256<byte> InsertVector128(Vector256<byte> value, Vector128<byte> data, byte index);

docs: __m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<short> InsertVector128(Vector256<short> value, Vector128<short> data, byte index);
clr-sig: Vector256<ushort> InsertVector128(Vector256<ushort> value, Vector128<ushort> data, byte index);

docs: __m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<int> InsertVector128(Vector256<int> value, Vector128<int> data, byte index);
clr-sig: Vector256<uint> InsertVector128(Vector256<uint> value, Vector128<uint> data, byte index);

docs: __m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<long> InsertVector128(Vector256<long> value, Vector128<long> data, byte index);
clr-sig: Vector256<ulong> InsertVector128(Vector256<ulong> value, Vector128<ulong> data, byte index);

docs: __m256 _mm256_insertf128_ps (__m256 a, __m128 b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<float> InsertVector128(Vector256<float> value, Vector128<float> data, byte index);

docs: __m256d _mm256_insertf128_pd (__m256d a, __m128d b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8
clr-sig: Vector256<double> InsertVector128(Vector256<double> value, Vector128<double> data, byte index);

