// 2019-09-24 02:30:05:539
uint project(uint src, Part6x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part9x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part12x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part15x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part18x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part21x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part24x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part27x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part30x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part6x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part9x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part12x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part15x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part18x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part21x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part24x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part27x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part30x3:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part8x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part12x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part16x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part32x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part8x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part12x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part16x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part20x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part24x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part32x4:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part10x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part15x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part20x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part25x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part30x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
byte select(uint src, Part10x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part15x5:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
uint select(uint src, Part12x6:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part12x6:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part16x8:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part32x8:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part16x8:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part32x8:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part24x8:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
Span<byte> unpack(byte src, Span<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Span`1<System.Byte> Z0.BitParts::unpack8x1(System.Byte,System.Span`1<System.Byte>)
    IL_0007: pop
    IL_0008: ldarg.1
    IL_0009: ret

}
Span<byte> unpack(byte src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.8
    IL_0002: newarr System.Byte
    IL_0007: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_000C: call System.Span`1<System.Byte> Z0.Bits::unpack(System.Byte,System.Span`1<System.Byte>)
    IL_0011: ret

}
Span<byte> unpack(ushort src, Span<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Span`1<System.Byte> Z0.BitParts::unpack16x1(System.UInt16,System.Span`1<System.Byte>)
    IL_0007: pop
    IL_0008: ldarg.1
    IL_0009: ret

}
Span<byte> unpack(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.s 16
    IL_0003: newarr System.Byte
    IL_0008: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_000D: call System.Span`1<System.Byte> Z0.Bits::unpack(System.UInt16,System.Span`1<System.Byte>)
    IL_0012: ret

}
Span<byte> unpack(uint src, Span<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Span`1<System.Byte> Z0.BitParts::unpack32x1(System.UInt32,System.Span`1<System.Byte>)
    IL_0007: pop
    IL_0008: ldarg.1
    IL_0009: ret

}
Span<byte> unpack(uint src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.s 32
    IL_0003: newarr System.Byte
    IL_0008: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_000D: call System.Span`1<System.Byte> Z0.Bits::unpack(System.UInt32,System.Span`1<System.Byte>)
    IL_0012: ret

}
Span<byte> unpack(ulong src, Span<byte> dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Span`1<System.Byte> Z0.BitParts::unpack64x1(System.UInt64,System.Span`1<System.Byte>)
    IL_0007: pop
    IL_0008: ldarg.1
    IL_0009: ret

}
Span<byte> unpack(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.s 64
    IL_0003: newarr System.Byte
    IL_0008: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_000D: call System.Span`1<System.Byte> Z0.Bits::unpack(System.UInt64,System.Span`1<System.Byte>)
    IL_0012: ret

}
BitSize width(in byte src)
{
    IL_0000: ldc.i4.8
    IL_0001: ldarg.0
    IL_0002: call System.Byte Z0.Bits::nlz(System.Byte&)
    IL_0007: sub
    IL_0008: call Z0.BitSize Z0.BitSize::op_Implicit(System.Int32)
    IL_000D: ret

}
BitSize width(in ushort src)
{
    IL_0000: ldc.i4.s 16
    IL_0002: ldarg.0
    IL_0003: call System.Byte Z0.Bits::nlz(System.UInt16&)
    IL_0008: sub
    IL_0009: call Z0.BitSize Z0.BitSize::op_Implicit(System.Int32)
    IL_000E: ret

}
BitSize width(in uint src)
{
    IL_0000: ldc.i4.s 32
    IL_0002: ldarg.0
    IL_0003: call System.Byte Z0.Bits::nlz(System.UInt32&)
    IL_0008: sub
    IL_0009: call Z0.BitSize Z0.BitSize::op_Implicit(System.Int32)
    IL_000E: ret

}
BitSize width(in ulong src)
{
    IL_0000: ldc.i4.s 64
    IL_0002: ldarg.0
    IL_0003: call System.Byte Z0.Bits::nlz(System.UInt64&)
    IL_0008: sub
    IL_0009: call Z0.BitSize Z0.BitSize::op_Implicit(System.Int32)
    IL_000E: ret

}
sbyte xorsl(sbyte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i1
    IL_0008: xor
    IL_0009: conv.i1
    IL_000A: ret

}
byte xorsl(byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u1
    IL_0008: xor
    IL_0009: conv.u1
    IL_000A: ret

}
short xorsl(short src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i2
    IL_0008: xor
    IL_0009: conv.i2
    IL_000A: ret

}
ushort xorsl(ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u2
    IL_0008: xor
    IL_0009: conv.u2
    IL_000A: ret

}
int xorsl(int src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: ret

}
uint xorsl(uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: ret

}
long xorsl(long src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: ret

}
ulong xorsl(ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: ret

}
ref sbyte xorsl(ref sbyte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i1
    IL_0003: ldarg.0
    IL_0004: ldind.i1
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i1
    IL_000B: xor
    IL_000C: conv.i1
    IL_000D: stind.i1
    IL_000E: ldarg.0
    IL_000F: ret

}
ref byte xorsl(ref byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.0
    IL_0004: ldind.u1
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u1
    IL_000B: xor
    IL_000C: conv.u1
    IL_000D: stind.i1
    IL_000E: ldarg.0
    IL_000F: ret

}
ref short xorsl(ref short src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i2
    IL_0003: ldarg.0
    IL_0004: ldind.i2
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i2
    IL_000B: xor
    IL_000C: conv.i2
    IL_000D: stind.i2
    IL_000E: ldarg.0
    IL_000F: ret

}
ref ushort xorsl(ref ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.0
    IL_0004: ldind.u2
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u2
    IL_000B: xor
    IL_000C: conv.u2
    IL_000D: stind.i2
    IL_000E: ldarg.0
    IL_000F: ret

}
ref int xorsl(ref int src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i4
    IL_0003: ldarg.0
    IL_0004: ldind.i4
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i4
    IL_000C: ldarg.0
    IL_000D: ret

}
ref uint xorsl(ref uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.0
    IL_0004: ldind.u4
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i4
    IL_000C: ldarg.0
    IL_000D: ret

}
ref long xorsl(ref long src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.0
    IL_0004: ldind.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
ref ulong xorsl(ref ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.0
    IL_0004: ldind.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
sbyte xorsr(sbyte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr
    IL_0007: conv.i1
    IL_0008: xor
    IL_0009: conv.i1
    IL_000A: ret

}
byte xorsr(byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr
    IL_0007: conv.u1
    IL_0008: xor
    IL_0009: conv.u1
    IL_000A: ret

}
short xorsr(short src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr
    IL_0007: conv.i2
    IL_0008: xor
    IL_0009: conv.i2
    IL_000A: ret

}
ushort xorsr(ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr
    IL_0007: conv.u2
    IL_0008: xor
    IL_0009: conv.u2
    IL_000A: ret

}
int xorsr(int src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr
    IL_0007: xor
    IL_0008: ret

}
uint xorsr(uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shr.un
    IL_0007: xor
    IL_0008: ret

}
long xorsr(long src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shr
    IL_0007: xor
    IL_0008: ret

}
ulong xorsr(ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shr.un
    IL_0007: xor
    IL_0008: ret

}
ref sbyte xorsr(ref sbyte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i1
    IL_0003: ldarg.0
    IL_0004: ldind.i1
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr
    IL_000A: conv.i1
    IL_000B: xor
    IL_000C: conv.i1
    IL_000D: stind.i1
    IL_000E: ldarg.0
    IL_000F: ret

}
ref byte xorsr(ref byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.0
    IL_0004: ldind.u1
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr
    IL_000A: conv.u1
    IL_000B: xor
    IL_000C: conv.u1
    IL_000D: stind.i1
    IL_000E: ldarg.0
    IL_000F: ret

}
ref short xorsr(ref short src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i2
    IL_0003: ldarg.0
    IL_0004: ldind.i2
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr
    IL_000A: conv.i2
    IL_000B: xor
    IL_000C: conv.i2
    IL_000D: stind.i2
    IL_000E: ldarg.0
    IL_000F: ret

}
ref ushort xorsr(ref ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.0
    IL_0004: ldind.u2
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr
    IL_000A: conv.u2
    IL_000B: xor
    IL_000C: conv.u2
    IL_000D: stind.i2
    IL_000E: ldarg.0
    IL_000F: ret

}
ref int xorsr(ref int src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i4
    IL_0003: ldarg.0
    IL_0004: ldind.i4
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr
    IL_000A: xor
    IL_000B: stind.i4
    IL_000C: ldarg.0
    IL_000D: ret

}
ref uint xorsr(ref uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.0
    IL_0004: ldind.u4
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shr.un
    IL_000A: xor
    IL_000B: stind.i4
    IL_000C: ldarg.0
    IL_000D: ret

}
ref long xorsr(ref long src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.0
    IL_0004: ldind.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shr
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
ref ulong xorsr(ref ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.0
    IL_0004: ldind.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shr.un
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
uint project(uint src, Part32x16:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part32x16:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part1x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part2x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part3x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part4x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part5x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part6x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part7x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part8x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part9x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part10x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part11x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part12x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part13x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part16x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part32x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
byte select(uint src, Part1x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part2x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part3x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part4x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part5x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte select(uint src, Part6x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
uint select(uint src, Part7x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part8x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part9x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part10x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part11x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part12x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part13x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part16x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part32x1:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
byte project(byte src, Part4x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.u1
    IL_0003: call System.Byte Z0.Bits::scatter(System.Byte,System.Byte)
    IL_0008: ret

}
byte project(byte src, Part6x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.u1
    IL_0003: call System.Byte Z0.Bits::scatter(System.Byte,System.Byte)
    IL_0008: ret

}
uint project(uint src, Part8x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part10x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part12x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part16x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint project(uint src, Part32x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part6x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part4x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part8x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part10x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part12x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part16x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint select(uint src, Part32x2:uint part)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
ulong rotr(ulong src, ulong offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.i4
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shr.un
    IL_0007: ldarg.0
    IL_0008: ldc.i4.s 64
    IL_000A: ldarg.1
    IL_000B: conv.i4
    IL_000C: sub
    IL_000D: ldc.i4.s 63
    IL_000F: and
    IL_0010: shl
    IL_0011: or
    IL_0012: ret

}
ref byte rotr(ref byte src, in byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.1
    IL_0004: ldind.u1
    IL_0005: call System.Byte Z0.Bits::rotr(System.Byte,System.Byte)
    IL_000A: stind.i1
    IL_000B: ldarg.0
    IL_000C: ret

}
ref ushort rotr(ref ushort src, in ushort offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.1
    IL_0004: ldind.u2
    IL_0005: call System.UInt16 Z0.Bits::rotr(System.UInt16,System.UInt16)
    IL_000A: stind.i2
    IL_000B: ldarg.0
    IL_000C: ret

}
ref uint rotr(ref uint src, in uint offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.1
    IL_0004: ldind.u4
    IL_0005: call System.UInt32 Z0.Bits::rotr(System.UInt32,System.UInt32)
    IL_000A: stind.i4
    IL_000B: ldarg.0
    IL_000C: ret

}
ref ulong rotr(ref ulong src, in ulong offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.1
    IL_0004: ldind.i8
    IL_0005: call System.UInt64 Z0.Bits::rotr(System.UInt64,System.UInt64)
    IL_000A: stind.i8
    IL_000B: ldarg.0
    IL_000C: ret

}
sbyte scatter(sbyte src, sbyte mask)
{
    IL_0000: ldarg.0
    IL_0001: conv.u1
    IL_0002: ldarg.1
    IL_0003: conv.u1
    IL_0004: call System.Byte Z0.Bits::scatter(System.Byte,System.Byte)
    IL_0009: conv.i1
    IL_000A: ret

}
byte scatter(byte src, byte mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitDeposit(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
short scatter(short src, short mask)
{
    IL_0000: ldarg.0
    IL_0001: conv.u2
    IL_0002: ldarg.1
    IL_0003: conv.u2
    IL_0004: call System.UInt16 Z0.Bits::scatter(System.UInt16,System.UInt16)
    IL_0009: conv.i2
    IL_000A: ret

}
ushort scatter(ushort src, ushort mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitDeposit(System.UInt32,System.UInt32)
    IL_0007: conv.u2
    IL_0008: ret

}
int scatter(int src, int mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::scatter(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint scatter(uint src, uint mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitDeposit(System.UInt32,System.UInt32)
    IL_0007: ret

}
long scatter(long src, long mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.Bits::scatter(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong scatter(ulong src, ulong mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ParallelBitDeposit(System.UInt64,System.UInt64)
    IL_0007: ret

}
sbyte sll(sbyte src, int offset)
{
    IL_0000: ldarga.s src
    IL_0002: call System.SByte& Z0.math::abs(System.SByte&)
    IL_0007: ldind.i1
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: conv.i1
    IL_000E: ret

}
byte sll(byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: conv.u1
    IL_0007: ret

}
short sll(short src, int offset)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int16& Z0.math::abs(System.Int16&)
    IL_0007: ldind.i2
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: conv.i2
    IL_000E: ret

}
ushort sll(ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: conv.u2
    IL_0007: ret

}
int sll(int src, int offset)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32& Z0.math::abs(System.Int32&)
    IL_0007: ldind.i4
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: ret

}
uint sll(uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: ret

}
long sll(long src, int offset)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int64& Z0.math::abs(System.Int64&)
    IL_0007: ldind.i8
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 63
    IL_000B: and
    IL_000C: shl
    IL_000D: ret

}
ulong sll(ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 63
    IL_0004: and
    IL_0005: shl
    IL_0006: ret

}
ref sbyte sll(ref sbyte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: call System.SByte& Z0.math::abs(System.SByte&)
    IL_0006: dup
    IL_0007: ldind.i1
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: conv.i1
    IL_000E: stind.i1
    IL_000F: ldarg.0
    IL_0010: ret

}
ref byte sll(ref byte src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 31
    IL_0006: and
    IL_0007: shl
    IL_0008: conv.u1
    IL_0009: stind.i1
    IL_000A: ldarg.0
    IL_000B: ret

}
ref short sll(ref short src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int16& Z0.math::abs(System.Int16&)
    IL_0006: dup
    IL_0007: ldind.i2
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: conv.i2
    IL_000E: stind.i2
    IL_000F: ldarg.0
    IL_0010: ret

}
ref ushort sll(ref ushort src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 31
    IL_0006: and
    IL_0007: shl
    IL_0008: conv.u2
    IL_0009: stind.i2
    IL_000A: ldarg.0
    IL_000B: ret

}
ref int sll(ref int src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32& Z0.math::abs(System.Int32&)
    IL_0006: dup
    IL_0007: ldind.i4
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 31
    IL_000B: and
    IL_000C: shl
    IL_000D: stind.i4
    IL_000E: ldarg.0
    IL_000F: ret

}
ref uint sll(ref uint src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 31
    IL_0006: and
    IL_0007: shl
    IL_0008: stind.i4
    IL_0009: ldarg.0
    IL_000A: ret

}
ref long sll(ref long src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64& Z0.math::abs(System.Int64&)
    IL_0006: dup
    IL_0007: ldind.i8
    IL_0008: ldarg.1
    IL_0009: ldc.i4.s 63
    IL_000B: and
    IL_000C: shl
    IL_000D: stind.i8
    IL_000E: ldarg.0
    IL_000F: ret

}
ref ulong sll(ref ulong src, int offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 63
    IL_0006: and
    IL_0007: shl
    IL_0008: stind.i8
    IL_0009: ldarg.0
    IL_000A: ret

}
ValueTuple<sbyte,sbyte> split(short src, N2 parts)
{
    IL_0000: ldarga.s src
    IL_0002: call System.SByte Z0.Bits::lo(System.Int16&)
    IL_0007: ldarga.s src
    IL_0009: call System.SByte Z0.Bits::hi(System.Int16&)
    IL_000E: newobj System.Void System.ValueTuple`2<System.SByte,System.SByte>::.ctor(System.SByte,System.SByte)
    IL_0013: ret

}
ValueTuple<byte,byte> split(ushort src, N2 parts)
{
    IL_0000: ldarg.0
    IL_0001: conv.u1
    IL_0002: ldarg.0
    IL_0003: ldc.i4.8
    IL_0004: shr
    IL_0005: conv.u1
    IL_0006: newobj System.Void System.ValueTuple`2<System.Byte,System.Byte>::.ctor(System.Byte,System.Byte)
    IL_000B: ret

}
ValueTuple<short,short> split(int src, N2 parts)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int16 Z0.Bits::lo(System.Int32&)
    IL_0007: ldarga.s src
    IL_0009: call System.Int16 Z0.Bits::hi(System.Int32&)
    IL_000E: newobj System.Void System.ValueTuple`2<System.Int16,System.Int16>::.ctor(System.Int16,System.Int16)
    IL_0013: ret

}
ValueTuple<ushort,ushort> split(uint src, N2 parts)
{
    IL_0000: ldarg.0
    IL_0001: conv.u2
    IL_0002: ldarg.0
    IL_0003: ldc.i4.s 16
    IL_0005: shr.un
    IL_0006: conv.u2
    IL_0007: newobj System.Void System.ValueTuple`2<System.UInt16,System.UInt16>::.ctor(System.UInt16,System.UInt16)
    IL_000C: ret

}
ValueTuple<int,int> split(long src, N2 parts)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32 Z0.Bits::lo(System.Int64&)
    IL_0007: ldarga.s src
    IL_0009: call System.Int32 Z0.Bits::hi(System.Int64&)
    IL_000E: newobj System.Void System.ValueTuple`2<System.Int32,System.Int32>::.ctor(System.Int32,System.Int32)
    IL_0013: ret

}
ValueTuple<uint,uint> split(ulong src, N2 parts)
{
    IL_0000: ldarg.0
    IL_0001: conv.u4
    IL_0002: ldarg.0
    IL_0003: ldc.i4.s 32
    IL_0005: shr.un
    IL_0006: conv.u4
    IL_0007: newobj System.Void System.ValueTuple`2<System.UInt32,System.UInt32>::.ctor(System.UInt32,System.UInt32)
    IL_000C: ret

}
ValueTuple<byte,byte,byte,byte> split(uint src, N4 parts)
{
    IL_0000: ldarg.0
    IL_0001: conv.u1
    IL_0002: ldarg.0
    IL_0003: ldc.i4.8
    IL_0004: shr.un
    IL_0005: conv.u1
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 16
    IL_0009: shr.un
    IL_000A: conv.u1
    IL_000B: ldarg.0
    IL_000C: ldc.i4.s 24
    IL_000E: shr.un
    IL_000F: conv.u1
    IL_0010: newobj System.Void System.ValueTuple`4<System.Byte,System.Byte,System.Byte,System.Byte>::.ctor(System.Byte,System.Byte,System.Byte,System.Byte)
    IL_0015: ret

}
ValueTuple<byte,byte,byte,byte,byte,byte,byte,ValueTuple<byte>> split(ulong src, N8 parts)
{
    IL_0000: ldarg.0
    IL_0001: conv.u1
    IL_0002: ldarg.0
    IL_0003: ldc.i4.8
    IL_0004: shr.un
    IL_0005: conv.u1
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 16
    IL_0009: shr.un
    IL_000A: conv.u1
    IL_000B: ldarg.0
    IL_000C: ldc.i4.s 24
    IL_000E: shr.un
    IL_000F: conv.u1
    IL_0010: ldarg.0
    IL_0011: ldc.i4.s 32
    IL_0013: shr.un
    IL_0014: conv.u1
    IL_0015: ldarg.0
    IL_0016: ldc.i4.s 40
    IL_0018: shr.un
    IL_0019: conv.u1
    IL_001A: ldarg.0
    IL_001B: ldc.i4.s 48
    IL_001D: shr.un
    IL_001E: conv.u1
    IL_001F: ldarg.0
    IL_0020: ldc.i4.s 56
    IL_0022: shr.un
    IL_0023: conv.u1
    IL_0024: newobj System.Void System.ValueTuple`1<System.Byte>::.ctor(System.Byte)
    IL_0029: newobj System.Void System.ValueTuple`8<System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.ValueTuple`1<System.Byte>>::.ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.ValueTuple`1<System.Byte>)
    IL_002E: ret

}
bool subset(byte test, byte set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, sbyte set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, short set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, ushort set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, int set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(byte test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.u8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.u8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(byte test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.u8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.u8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(byte test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(byte test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: conv.u8
    IL_0008: and
    IL_0009: ldarg.0
    IL_000A: conv.u8
    IL_000B: ceq
    IL_000D: ret

}
bool subset(sbyte test, byte set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(sbyte test, sbyte set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(sbyte test, short set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(sbyte test, ushort set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(sbyte test, int set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(sbyte test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u8
    IL_0002: ldarg.0
    IL_0003: conv.i8
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: conv.i8
    IL_0007: ceq
    IL_0009: ret

}
bool subset(sbyte test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.i8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.i8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(sbyte test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u1
    IL_0002: ldarg.0
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: ceq
    IL_0007: ret

}
bool subset(sbyte test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(sbyte test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: conv.i8
    IL_0008: and
    IL_0009: ldarg.0
    IL_000A: conv.i8
    IL_000B: ceq
    IL_000D: ret

}
bool subset(ushort test, short set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(ushort test, ushort set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(ushort test, int set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(ushort test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(ushort test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.u8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.u8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(ushort test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.u8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.u8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(ushort test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(short test, short set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(short test, ushort set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(short test, int set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(short test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u8
    IL_0002: ldarg.0
    IL_0003: conv.i8
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: conv.i8
    IL_0007: ceq
    IL_0009: ret

}
bool subset(short test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.i8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.i8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(short test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u2
    IL_0002: ldarg.0
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: ceq
    IL_0007: ret

}
bool subset(short test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(uint test, int set)
{
    IL_0000: ldarg.1
    IL_0001: conv.i8
    IL_0002: ldarg.0
    IL_0003: conv.u8
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: conv.u8
    IL_0007: ceq
    IL_0009: ret

}
bool subset(int test, int set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(int test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u8
    IL_0002: ldarg.0
    IL_0003: conv.i8
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: conv.i8
    IL_0007: ceq
    IL_0009: ret

}
bool subset(int test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.i8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.i8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(int test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u2
    IL_0002: ldarg.0
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: ceq
    IL_0007: ret

}
bool subset(int test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(int test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: conv.i8
    IL_0008: and
    IL_0009: ldarg.0
    IL_000A: conv.i8
    IL_000B: ceq
    IL_000D: ret

}
bool subset(uint test, uint set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(uint test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: conv.u8
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: conv.u8
    IL_0006: ceq
    IL_0008: ret

}
bool subset(uint test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u2
    IL_0002: ldarg.0
    IL_0003: and
    IL_0004: ldarg.0
    IL_0005: ceq
    IL_0007: ret

}
bool subset(uint test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: conv.i8
    IL_0007: ldarg.0
    IL_0008: conv.u8
    IL_0009: and
    IL_000A: ldarg.0
    IL_000B: conv.u8
    IL_000C: ceq
    IL_000E: ret

}
bool subset(uint test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: conv.u8
    IL_0008: and
    IL_0009: ldarg.0
    IL_000A: conv.u8
    IL_000B: ceq
    IL_000D: ret

}
bool subset(long test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(long test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u2
    IL_0002: conv.u8
    IL_0003: ldarg.0
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: ceq
    IL_0008: ret

}
bool subset(long test, float set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: conv.i8
    IL_0007: ldarg.0
    IL_0008: and
    IL_0009: ldarg.0
    IL_000A: ceq
    IL_000C: ret

}
bool subset(long test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool subset(ulong test, long set)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: and
    IL_0003: ldarg.0
    IL_0004: ceq
    IL_0006: ret

}
bool subset(ulong test, ulong set)
{
    IL_0000: ldarg.1
    IL_0001: conv.u2
    IL_0002: conv.u8
    IL_0003: ldarg.0
    IL_0004: and
    IL_0005: ldarg.0
    IL_0006: ceq
    IL_0008: ret

}
bool subset(ulong test, double set)
{
    IL_0000: ldarg.1
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.0
    IL_0007: and
    IL_0008: ldarg.0
    IL_0009: ceq
    IL_000B: ret

}
bool test(in sbyte src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.SByte&,System.Int32&)
    IL_0007: ret

}
bool test(in byte src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Byte&,System.Int32&)
    IL_0007: ret

}
bool test(in short src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Int16&,System.Int32&)
    IL_0007: ret

}
bool test(in ushort src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.UInt16&,System.Int32&)
    IL_0007: ret

}
bool test(in int src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Int32&,System.Int32&)
    IL_0007: ret

}
bool test(in uint src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.UInt32&,System.Int32&)
    IL_0007: ret

}
bool test(in long src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Int64&,System.Int32&)
    IL_0007: ret

}
bool test(in ulong src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.UInt64&,System.Int32&)
    IL_0007: ret

}
bool test(in float src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Single&,System.Int32&)
    IL_0007: ret

}
bool test(in double src, in int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Boolean Z0.BitMask::test(System.Double&,System.Int32&)
    IL_0007: ret

}
sbyte toggle(sbyte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i1
    IL_0008: xor
    IL_0009: conv.i1
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret

}
byte toggle(byte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u1
    IL_0008: xor
    IL_0009: conv.u1
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret

}
short toggle(short src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.i2
    IL_0008: xor
    IL_0009: conv.i2
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret

}
ushort toggle(ushort src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: conv.u2
    IL_0008: xor
    IL_0009: conv.u2
    IL_000A: dup
    IL_000B: starg.s src
    IL_000D: ret

}
int toggle(int src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: dup
    IL_0009: starg.s src
    IL_000B: ret

}
uint toggle(uint src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: ldarg.1
    IL_0003: ldc.i4.s 31
    IL_0005: and
    IL_0006: shl
    IL_0007: xor
    IL_0008: dup
    IL_0009: starg.s src
    IL_000B: ret

}
long toggle(long src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: conv.i8
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 63
    IL_0006: and
    IL_0007: shl
    IL_0008: xor
    IL_0009: dup
    IL_000A: starg.s src
    IL_000C: ret

}
ulong toggle(ulong src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.1
    IL_0002: conv.i8
    IL_0003: ldarg.1
    IL_0004: ldc.i4.s 63
    IL_0006: and
    IL_0007: shl
    IL_0008: xor
    IL_0009: dup
    IL_000A: starg.s src
    IL_000C: ret

}
float toggle(float src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32& System.Runtime.CompilerServices.Unsafe::As<System.Single,System.Int32>(System.Single&)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldind.i4
    IL_000B: ldc.i4.1
    IL_000C: ldarg.1
    IL_000D: ldc.i4.s 31
    IL_000F: and
    IL_0010: shl
    IL_0011: xor
    IL_0012: stind.i4
    IL_0013: ldarg.0
    IL_0014: ret

}
double toggle(double src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int64& System.Runtime.CompilerServices.Unsafe::As<System.Double,System.Int64>(System.Double&)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldind.i8
    IL_000B: ldc.i4.1
    IL_000C: conv.i8
    IL_000D: ldarg.1
    IL_000E: ldc.i4.s 63
    IL_0010: and
    IL_0011: shl
    IL_0012: xor
    IL_0013: stind.i8
    IL_0014: ldarg.0
    IL_0015: ret

}
ref sbyte toggle(ref sbyte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i1
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: conv.i1
    IL_000A: xor
    IL_000B: conv.i1
    IL_000C: stind.i1
    IL_000D: ldarg.0
    IL_000E: ret

}
ref byte toggle(ref byte src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: conv.u1
    IL_000A: xor
    IL_000B: conv.u1
    IL_000C: stind.i1
    IL_000D: ldarg.0
    IL_000E: ret

}
ref short toggle(ref short src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i2
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: conv.i2
    IL_000A: xor
    IL_000B: conv.i2
    IL_000C: stind.i2
    IL_000D: ldarg.0
    IL_000E: ret

}
ref ushort toggle(ref ushort src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: conv.u2
    IL_000A: xor
    IL_000B: conv.u2
    IL_000C: stind.i2
    IL_000D: ldarg.0
    IL_000E: ret

}
ref int toggle(ref int src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i4
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: xor
    IL_000A: stind.i4
    IL_000B: ldarg.0
    IL_000C: ret

}
ref uint toggle(ref uint src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldc.i4.1
    IL_0004: ldarg.1
    IL_0005: ldc.i4.s 31
    IL_0007: and
    IL_0008: shl
    IL_0009: xor
    IL_000A: stind.i4
    IL_000B: ldarg.0
    IL_000C: ret

}
ref long toggle(ref long src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldc.i4.1
    IL_0004: conv.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
ref ulong toggle(ref ulong src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldc.i4.1
    IL_0004: conv.i8
    IL_0005: ldarg.1
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: xor
    IL_000B: stind.i8
    IL_000C: ldarg.0
    IL_000D: ret

}
ref float toggle(ref float src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32& System.Runtime.CompilerServices.Unsafe::As<System.Single,System.Int32>(System.Single&)
    IL_0006: stloc.0
    IL_0007: ldloc.0
    IL_0008: ldloc.0
    IL_0009: ldind.i4
    IL_000A: ldc.i4.1
    IL_000B: ldarg.1
    IL_000C: ldc.i4.s 31
    IL_000E: and
    IL_000F: shl
    IL_0010: xor
    IL_0011: stind.i4
    IL_0012: ldarg.0
    IL_0013: ret

}
ref double toggle(ref double src, int pos)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64& System.Runtime.CompilerServices.Unsafe::As<System.Double,System.Int64>(System.Double&)
    IL_0006: stloc.0
    IL_0007: ldloc.0
    IL_0008: ldloc.0
    IL_0009: ldind.i8
    IL_000A: ldc.i4.1
    IL_000B: conv.i8
    IL_000C: ldarg.1
    IL_000D: ldc.i4.s 63
    IL_000F: and
    IL_0010: shl
    IL_0011: xor
    IL_0012: stind.i8
    IL_0013: ldarg.0
    IL_0014: ret

}
byte trunc(byte src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
ref byte trunc(ref byte src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.1
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0009: conv.u1
    IL_000A: stind.i1
    IL_000B: ldarg.0
    IL_000C: ret

}
ushort trunc(ushort src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: conv.u2
    IL_0008: ret

}
ref ushort trunc(ref ushort src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.1
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0009: conv.u2
    IL_000A: stind.i2
    IL_000B: ldarg.0
    IL_000C: ret

}
uint trunc(uint src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: ret

}
ref uint trunc(ref uint src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.1
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0009: stind.i4
    IL_000A: ldarg.0
    IL_000B: ret

}
ulong trunc(ulong src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.u8
    IL_0003: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ZeroHighBits(System.UInt64,System.UInt64)
    IL_0008: ret

}
ref ulong trunc(ref ulong src, byte len)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.1
    IL_0004: conv.u8
    IL_0005: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ZeroHighBits(System.UInt64,System.UInt64)
    IL_000A: stind.i8
    IL_000B: ldarg.0
    IL_000C: ret

}
byte hi(in byte src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u1
    IL_0002: ldc.i4.4
    IL_0003: shr
    IL_0004: conv.u1
    IL_0005: ret

}
byte lo(in byte src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u1
    IL_0002: ldc.i4.4
    IL_0003: shl
    IL_0004: conv.u1
    IL_0005: ldc.i4.4
    IL_0006: shr
    IL_0007: conv.u1
    IL_0008: ret

}
byte hi(in ushort src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u2
    IL_0002: ldc.i4.8
    IL_0003: shr
    IL_0004: conv.u1
    IL_0005: ret

}
byte lo(in ushort src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u2
    IL_0002: conv.u1
    IL_0003: ret

}
sbyte hi(in short src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i2
    IL_0002: ldc.i4.8
    IL_0003: shr
    IL_0004: conv.i1
    IL_0005: ret

}
sbyte lo(in short src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i2
    IL_0002: conv.i1
    IL_0003: ret

}
short hi(in int src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i4
    IL_0002: ldc.i4.s 16
    IL_0004: shr
    IL_0005: conv.i2
    IL_0006: ret

}
short lo(in int src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i4
    IL_0002: conv.i2
    IL_0003: ret

}
int hi(in long src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldc.i4.s 32
    IL_0004: shr
    IL_0005: conv.i4
    IL_0006: ret

}
int lo(in long src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: conv.i4
    IL_0003: ret

}
byte gather(byte src, byte mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
sbyte gather(sbyte src, sbyte mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: conv.i1
    IL_0008: ret

}
short gather(short src, short mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: conv.i2
    IL_0008: ret

}
ushort gather(ushort src, ushort mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: conv.u2
    IL_0008: ret

}
int gather(int src, int mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: ret

}
uint gather(uint src, uint mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_0007: ret

}
long gather(long src, long mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ParallelBitExtract(System.UInt64,System.UInt64)
    IL_0007: ret

}
ulong gather(ulong src, ulong mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ParallelBitExtract(System.UInt64,System.UInt64)
    IL_0007: ret

}
uint gather(float src, uint mask)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.1
    IL_0007: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ParallelBitExtract(System.UInt32,System.UInt32)
    IL_000C: ret

}
ulong gather(double src, ulong mask)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.1
    IL_0007: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ParallelBitExtract(System.UInt64,System.UInt64)
    IL_000C: ret

}
byte gather(byte src, BitMask8:byte mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.Bits::gather(System.Byte,System.Byte)
    IL_0007: ret

}
ushort gather(ushort src, BitMask16:ushort mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.Bits::gather(System.UInt16,System.UInt16)
    IL_0007: ret

}
uint gather(uint src, BitMask32:uint mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0007: ret

}
ulong gather(ulong src, BitMask64:ulong mask)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.Bits::gather(System.UInt64,System.UInt64)
    IL_0007: ret

}
ref byte gather(byte src, byte mask, ref byte dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Byte Z0.Bits::gather(System.Byte,System.Byte)
    IL_0008: stind.i1
    IL_0009: ldarg.2
    IL_000A: ret

}
ref sbyte gather(sbyte src, sbyte mask, ref sbyte dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.SByte Z0.Bits::gather(System.SByte,System.SByte)
    IL_0008: stind.i1
    IL_0009: ldarg.2
    IL_000A: ret

}
ref short gather(short src, short mask, ref short dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Int16 Z0.Bits::gather(System.Int16,System.Int16)
    IL_0008: stind.i2
    IL_0009: ldarg.2
    IL_000A: ret

}
ref ushort gather(ushort src, ushort mask, ref ushort dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.UInt16 Z0.Bits::gather(System.UInt16,System.UInt16)
    IL_0008: stind.i2
    IL_0009: ldarg.2
    IL_000A: ret

}
ref int gather(int src, int mask, ref int dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Int32 Z0.Bits::gather(System.Int32,System.Int32)
    IL_0008: stind.i4
    IL_0009: ldarg.2
    IL_000A: ret

}
ref uint gather(uint src, uint mask, ref uint dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.UInt32 Z0.Bits::gather(System.UInt32,System.UInt32)
    IL_0008: stind.i4
    IL_0009: ldarg.2
    IL_000A: ret

}
ref long gather(long src, long mask, ref long dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Int64 Z0.Bits::gather(System.Int64,System.Int64)
    IL_0008: stind.i8
    IL_0009: ldarg.2
    IL_000A: ret

}
ref ulong gather(ulong src, ulong mask, ref ulong dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.UInt64 Z0.Bits::gather(System.UInt64,System.UInt64)
    IL_0008: stind.i8
    IL_0009: ldarg.2
    IL_000A: ret

}
ref ulong mask(ref ulong dst, Int32[] exponents)
{
    IL_0000: ldc.i4.0
    IL_0001: stloc.0
    IL_0002: br.s IL_0015
    IL_0004: ldarg.0
    IL_0005: ldarg.0
    IL_0006: ldind.i8
    IL_0007: ldarg.1
    IL_0008: ldloc.0
    IL_0009: ldelem.i4
    IL_000A: call System.UInt64 Z0.Pow2::pow(System.Int32)
    IL_000F: or
    IL_0010: stind.i8
    IL_0011: ldloc.0
    IL_0012: ldc.i4.1
    IL_0013: add
    IL_0014: stloc.0
    IL_0015: ldloc.0
    IL_0016: ldarg.1
    IL_0017: ldlen
    IL_0018: conv.i4
    IL_0019: blt.s IL_0004
    IL_001B: ldarg.0
    IL_001C: ret

}
byte log2(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 System.Numerics.BitOperations::Log2(System.UInt32)
    IL_0006: conv.u1
    IL_0007: ret

}
ushort log2(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 System.Numerics.BitOperations::Log2(System.UInt32)
    IL_0006: conv.u2
    IL_0007: ret

}
uint log2(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 System.Numerics.BitOperations::Log2(System.UInt32)
    IL_0006: ret

}
ulong log2(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 System.Numerics.BitOperations::Log2(System.UInt64)
    IL_0006: conv.i8
    IL_0007: ret

}
byte nlz(in byte src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Lzcnt::LeadingZeroCount(System.UInt32)
    IL_0007: ldc.i4.s 24
    IL_0009: sub
    IL_000A: conv.u1
    IL_000B: ret

}
byte nlz(in ushort src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u2
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Lzcnt::LeadingZeroCount(System.UInt32)
    IL_0007: ldc.i4.s 16
    IL_0009: sub
    IL_000A: conv.u1
    IL_000B: ret

}
byte nlz(in uint src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Lzcnt::LeadingZeroCount(System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
byte nlz(in ulong src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: call System.UInt64 System.Runtime.Intrinsics.X86.Lzcnt/X64::LeadingZeroCount(System.UInt64)
    IL_0007: conv.u1
    IL_0008: ret

}
ulong ntz(sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(short src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(int src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::TrailingZeroCount(System.UInt32)
    IL_0006: conv.u8
    IL_0007: ret

}
ulong ntz(long src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::TrailingZeroCount(System.UInt64)
    IL_0006: ret

}
ulong ntz(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::TrailingZeroCount(System.UInt64)
    IL_0006: ret

}
ushort pack(byte x0, byte x1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.8
    IL_0003: shl
    IL_0004: or
    IL_0005: conv.u2
    IL_0006: ret

}
uint pack(ushort x0, ushort x1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 16
    IL_0004: shl
    IL_0005: or
    IL_0006: ret

}
ulong pack(in uint x0, in uint x1)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: conv.u8
    IL_0003: ldarg.1
    IL_0004: ldind.u4
    IL_0005: conv.u8
    IL_0006: ldc.i4.s 32
    IL_0008: shl
    IL_0009: or
    IL_000A: ret

}
uint pack(byte x0, byte x1, byte x2, byte x3)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.8
    IL_0003: shl
    IL_0004: or
    IL_0005: ldarg.2
    IL_0006: ldc.i4.s 16
    IL_0008: shl
    IL_0009: or
    IL_000A: ldarg.3
    IL_000B: ldc.i4.s 24
    IL_000D: shl
    IL_000E: or
    IL_000F: ret

}
ulong pack(ushort x0, ushort x1, ushort x2, ushort x3)
{
    IL_0000: ldarg.0
    IL_0001: conv.u8
    IL_0002: ldarg.1
    IL_0003: conv.u8
    IL_0004: ldc.i4.s 16
    IL_0006: shl
    IL_0007: or
    IL_0008: ldarg.1
    IL_0009: conv.u8
    IL_000A: ldc.i4.s 32
    IL_000C: shl
    IL_000D: or
    IL_000E: ldarg.1
    IL_000F: conv.u8
    IL_0010: ldc.i4.s 48
    IL_0012: shl
    IL_0013: or
    IL_0014: ret

}
ulong pack(byte x0, byte x1, byte x2, byte x3, byte x4, byte x5, byte x6, byte x7)
{
    IL_0000: ldarg.0
    IL_0001: conv.u8
    IL_0002: ldarg.1
    IL_0003: conv.u8
    IL_0004: ldc.i4.8
    IL_0005: shl
    IL_0006: or
    IL_0007: ldarg.2
    IL_0008: conv.u8
    IL_0009: ldc.i4.s 16
    IL_000B: shl
    IL_000C: or
    IL_000D: ldarg.3
    IL_000E: conv.u8
    IL_000F: ldc.i4.s 24
    IL_0011: shl
    IL_0012: or
    IL_0013: ldarg.s x4
    IL_0015: conv.u8
    IL_0016: ldc.i4.s 32
    IL_0018: shl
    IL_0019: or
    IL_001A: ldarg.s x5
    IL_001C: conv.u8
    IL_001D: ldc.i4.s 40
    IL_001F: shl
    IL_0020: or
    IL_0021: ldarg.s x6
    IL_0023: conv.u8
    IL_0024: ldc.i4.s 48
    IL_0026: shl
    IL_0027: or
    IL_0028: ldarg.s x7
    IL_002A: conv.u8
    IL_002B: ldc.i4.s 56
    IL_002D: shl
    IL_002E: or
    IL_002F: ret

}
ref byte pack(in byte x0, in byte x1, in byte x2, in byte x3, in byte x4, in byte x5, in byte x6, in byte x7, in byte pos, ref byte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.s pos
    IL_0003: ldind.u1
    IL_0004: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_0009: brfalse.s IL_0017
    IL_000B: ldarg.s dst
    IL_000D: ldc.i4.0
    IL_000E: stloc.0
    IL_000F: ldloca.s V_0
    IL_0011: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_0016: pop
    IL_0017: ldarg.1
    IL_0018: ldarg.s pos
    IL_001A: ldind.u1
    IL_001B: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_0020: brfalse.s IL_002E
    IL_0022: ldarg.s dst
    IL_0024: ldc.i4.1
    IL_0025: stloc.0
    IL_0026: ldloca.s V_0
    IL_0028: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_002D: pop
    IL_002E: ldarg.2
    IL_002F: ldarg.s pos
    IL_0031: ldind.u1
    IL_0032: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_0037: brfalse.s IL_0045
    IL_0039: ldarg.s dst
    IL_003B: ldc.i4.2
    IL_003C: stloc.0
    IL_003D: ldloca.s V_0
    IL_003F: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_0044: pop
    IL_0045: ldarg.3
    IL_0046: ldarg.s pos
    IL_0048: ldind.u1
    IL_0049: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_004E: brfalse.s IL_005C
    IL_0050: ldarg.s dst
    IL_0052: ldc.i4.3
    IL_0053: stloc.0
    IL_0054: ldloca.s V_0
    IL_0056: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_005B: pop
    IL_005C: ldarg.s x4
    IL_005E: ldarg.s pos
    IL_0060: ldind.u1
    IL_0061: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_0066: brfalse.s IL_0074
    IL_0068: ldarg.s dst
    IL_006A: ldc.i4.4
    IL_006B: stloc.0
    IL_006C: ldloca.s V_0
    IL_006E: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_0073: pop
    IL_0074: ldarg.s x5
    IL_0076: ldarg.s pos
    IL_0078: ldind.u1
    IL_0079: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_007E: brfalse.s IL_008C
    IL_0080: ldarg.s dst
    IL_0082: ldc.i4.5
    IL_0083: stloc.0
    IL_0084: ldloca.s V_0
    IL_0086: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_008B: pop
    IL_008C: ldarg.s x6
    IL_008E: ldarg.s pos
    IL_0090: ldind.u1
    IL_0091: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_0096: brfalse.s IL_00A4
    IL_0098: ldarg.s dst
    IL_009A: ldc.i4.6
    IL_009B: stloc.0
    IL_009C: ldloca.s V_0
    IL_009E: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_00A3: pop
    IL_00A4: ldarg.s x7
    IL_00A6: ldarg.s pos
    IL_00A8: ldind.u1
    IL_00A9: call System.Boolean Z0.BitMask::test(System.Byte&,System.Byte)
    IL_00AE: brfalse.s IL_00BC
    IL_00B0: ldarg.s dst
    IL_00B2: ldc.i4.7
    IL_00B3: stloc.0
    IL_00B4: ldloca.s V_0
    IL_00B6: call System.Byte& Z0.BitMask::enable(System.Byte&,System.Int32&)
    IL_00BB: pop
    IL_00BC: ldarg.s dst
    IL_00BE: ret

}
Span<byte> pack(ReadOnlySpan<Bit> src)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32 System.ReadOnlySpan`1<Z0.Bit>::get_Length()
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldc.i4.3
    IL_000A: shr
    IL_000B: stloc.1
    IL_000C: ldloc.0
    IL_000D: ldc.i4.7
    IL_000E: and
    IL_000F: brfalse.s IL_0015
    IL_0011: ldloc.1
    IL_0012: ldc.i4.1
    IL_0013: add
    IL_0014: stloc.1
    IL_0015: ldarg.0
    IL_0016: ldloc.1
    IL_0017: newarr System.Byte
    IL_001C: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_0021: call System.Span`1<System.Byte> Z0.Bits::pack(System.ReadOnlySpan`1<Z0.Bit>,System.Span`1<System.Byte>)
    IL_0026: ret

}
Span<byte> pack(ReadOnlySpan<Bit> src, Span<byte> dst)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Int32 System.ReadOnlySpan`1<Z0.Bit>::get_Length()
    IL_0007: stloc.0
    IL_0008: ldc.i4.0
    IL_0009: stloc.1
    IL_000A: br.s IL_003C
    IL_000C: ldarga.s src
    IL_000E: ldloc.1
    IL_000F: call Z0.Bit& modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1<Z0.Bit>::get_Item(System.Int32)
    IL_0014: ldobj Z0.Bit
    IL_0019: call System.Boolean Z0.Bit::op_Implicit(Z0.Bit)
    IL_001E: brfalse.s IL_0038
    IL_0020: ldarga.s dst
    IL_0022: ldloc.1
    IL_0023: ldc.i4.3
    IL_0024: shr
    IL_0025: call System.Byte& System.Span`1<System.Byte>::get_Item(System.Int32)
    IL_002A: dup
    IL_002B: ldind.u1
    IL_002C: ldc.i4.1
    IL_002D: ldloc.1
    IL_002E: ldc.i4.7
    IL_002F: and
    IL_0030: ldc.i4.s 31
    IL_0032: and
    IL_0033: shl
    IL_0034: conv.u1
    IL_0035: or
    IL_0036: conv.u1
    IL_0037: stind.i1
    IL_0038: ldloc.1
    IL_0039: ldc.i4.1
    IL_003A: add
    IL_003B: stloc.1
    IL_003C: ldloc.1
    IL_003D: ldloc.0
    IL_003E: blt.s IL_000C
    IL_0040: ldarg.1
    IL_0041: ret

}
Span<byte> pack(Boolean[] src)
{
    IL_0000: ldarg.0
    IL_0001: ldlen
    IL_0002: conv.i4
    IL_0003: stloc.0
    IL_0004: ldloc.0
    IL_0005: ldc.i4.3
    IL_0006: shr
    IL_0007: stloc.1
    IL_0008: ldloc.0
    IL_0009: ldc.i4.7
    IL_000A: and
    IL_000B: brfalse.s IL_0011
    IL_000D: ldloc.1
    IL_000E: ldc.i4.1
    IL_000F: add
    IL_0010: stloc.1
    IL_0011: ldloc.1
    IL_0012: newarr System.Byte
    IL_0017: call System.Span`1<System.Byte> System.Span`1<System.Byte>::op_Implicit(System.Byte[])
    IL_001C: stloc.2
    IL_001D: ldc.i4.0
    IL_001E: stloc.3
    IL_001F: br.s IL_0042
    IL_0021: ldarg.0
    IL_0022: ldloc.3
    IL_0023: ldelem.u1
    IL_0024: brfalse.s IL_003E
    IL_0026: ldloca.s V_2
    IL_0028: ldloc.3
    IL_0029: ldc.i4.3
    IL_002A: shr
    IL_002B: call System.Byte& System.Span`1<System.Byte>::get_Item(System.Int32)
    IL_0030: dup
    IL_0031: ldind.u1
    IL_0032: ldc.i4.1
    IL_0033: ldloc.3
    IL_0034: ldc.i4.7
    IL_0035: and
    IL_0036: ldc.i4.s 31
    IL_0038: and
    IL_0039: shl
    IL_003A: conv.u1
    IL_003B: or
    IL_003C: conv.u1
    IL_003D: stind.i1
    IL_003E: ldloc.3
    IL_003F: ldc.i4.1
    IL_0040: add
    IL_0041: stloc.3
    IL_0042: ldloc.3
    IL_0043: ldloc.0
    IL_0044: blt.s IL_0021
    IL_0046: ldloc.2
    IL_0047: ret

}
ref byte packseq(ReadOnlySpan<byte> src, out byte dst)
{
    IL_0000: ldarg.1
    IL_0001: ldc.i4.0
    IL_0002: stind.i1
    IL_0003: ldc.i4.8
    IL_0004: ldarga.s src
    IL_0006: call System.Int32 System.ReadOnlySpan`1<System.Byte>::get_Length()
    IL_000B: call System.Int32 System.Math::Min(System.Int32,System.Int32)
    IL_0010: stloc.0
    IL_0011: ldc.i4.0
    IL_0012: stloc.1
    IL_0013: br.s IL_0032
    IL_0015: ldarga.s src
    IL_0017: ldloc.1
    IL_0018: call System.Byte& modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1<System.Byte>::get_Item(System.Int32)
    IL_001D: ldind.u1
    IL_001E: ldc.i4.1
    IL_001F: bne.un.s IL_002E
    IL_0021: ldarg.1
    IL_0022: ldarg.1
    IL_0023: ldind.u1
    IL_0024: ldc.i4.1
    IL_0025: ldloc.1
    IL_0026: ldc.i4.s 31
    IL_0028: and
    IL_0029: shl
    IL_002A: conv.u1
    IL_002B: or
    IL_002C: conv.u1
    IL_002D: stind.i1
    IL_002E: ldloc.1
    IL_002F: ldc.i4.1
    IL_0030: add
    IL_0031: stloc.1
    IL_0032: ldloc.1
    IL_0033: ldloc.0
    IL_0034: blt.s IL_0015
    IL_0036: ldarg.1
    IL_0037: ret

}
ref ushort packseq(ReadOnlySpan<byte> src, out ushort dst)
{
    IL_0000: ldarg.1
    IL_0001: ldc.i4.0
    IL_0002: stind.i2
    IL_0003: ldc.i4.s 16
    IL_0005: ldarga.s src
    IL_0007: call System.Int32 System.ReadOnlySpan`1<System.Byte>::get_Length()
    IL_000C: call System.Int32 System.Math::Min(System.Int32,System.Int32)
    IL_0011: stloc.0
    IL_0012: ldc.i4.0
    IL_0013: stloc.1
    IL_0014: br.s IL_0033
    IL_0016: ldarga.s src
    IL_0018: ldloc.1
    IL_0019: call System.Byte& modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1<System.Byte>::get_Item(System.Int32)
    IL_001E: ldind.u1
    IL_001F: ldc.i4.1
    IL_0020: bne.un.s IL_002F
    IL_0022: ldarg.1
    IL_0023: ldarg.1
    IL_0024: ldind.u2
    IL_0025: ldc.i4.1
    IL_0026: ldloc.1
    IL_0027: ldc.i4.s 31
    IL_0029: and
    IL_002A: shl
    IL_002B: conv.u2
    IL_002C: or
    IL_002D: conv.u2
    IL_002E: stind.i2
    IL_002F: ldloc.1
    IL_0030: ldc.i4.1
    IL_0031: add
    IL_0032: stloc.1
    IL_0033: ldloc.1
    IL_0034: ldloc.0
    IL_0035: blt.s IL_0016
    IL_0037: ldarg.1
    IL_0038: ret

}
ref uint packseq(ReadOnlySpan<byte> src, out uint dst)
{
    IL_0000: ldarg.1
    IL_0001: ldc.i4.0
    IL_0002: stind.i4
    IL_0003: ldc.i4.s 32
    IL_0005: ldarga.s src
    IL_0007: call System.Int32 System.ReadOnlySpan`1<System.Byte>::get_Length()
    IL_000C: call System.Int32 System.Math::Min(System.Int32,System.Int32)
    IL_0011: stloc.0
    IL_0012: ldc.i4.0
    IL_0013: stloc.1
    IL_0014: br.s IL_0031
    IL_0016: ldarga.s src
    IL_0018: ldloc.1
    IL_0019: call System.Byte& modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1<System.Byte>::get_Item(System.Int32)
    IL_001E: ldind.u1
    IL_001F: ldc.i4.1
    IL_0020: bne.un.s IL_002D
    IL_0022: ldarg.1
    IL_0023: ldarg.1
    IL_0024: ldind.u4
    IL_0025: ldc.i4.1
    IL_0026: ldloc.1
    IL_0027: ldc.i4.s 31
    IL_0029: and
    IL_002A: shl
    IL_002B: or
    IL_002C: stind.i4
    IL_002D: ldloc.1
    IL_002E: ldc.i4.1
    IL_002F: add
    IL_0030: stloc.1
    IL_0031: ldloc.1
    IL_0032: ldloc.0
    IL_0033: blt.s IL_0016
    IL_0035: ldarg.1
    IL_0036: ret

}
ref ulong packseq(ReadOnlySpan<byte> src, out ulong dst)
{
    IL_0000: ldarg.1
    IL_0001: ldc.i4.0
    IL_0002: conv.i8
    IL_0003: stind.i8
    IL_0004: ldc.i4.s 64
    IL_0006: ldarga.s src
    IL_0008: call System.Int32 System.ReadOnlySpan`1<System.Byte>::get_Length()
    IL_000D: call System.Int32 System.Math::Min(System.Int32,System.Int32)
    IL_0012: stloc.0
    IL_0013: ldc.i4.0
    IL_0014: stloc.1
    IL_0015: br.s IL_0033
    IL_0017: ldarga.s src
    IL_0019: ldloc.1
    IL_001A: call System.Byte& modreq(System.Runtime.InteropServices.InAttribute) System.ReadOnlySpan`1<System.Byte>::get_Item(System.Int32)
    IL_001F: ldind.u1
    IL_0020: ldc.i4.1
    IL_0021: bne.un.s IL_002F
    IL_0023: ldarg.1
    IL_0024: ldarg.1
    IL_0025: ldind.i8
    IL_0026: ldc.i4.1
    IL_0027: conv.i8
    IL_0028: ldloc.1
    IL_0029: ldc.i4.s 63
    IL_002B: and
    IL_002C: shl
    IL_002D: or
    IL_002E: stind.i8
    IL_002F: ldloc.1
    IL_0030: ldc.i4.1
    IL_0031: add
    IL_0032: stloc.1
    IL_0033: ldloc.1
    IL_0034: ldloc.0
    IL_0035: blt.s IL_0017
    IL_0037: ldarg.1
    IL_0038: ret

}
uint pop(sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(short src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(int src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Popcnt::PopCount(System.UInt32)
    IL_0006: ret

}
uint pop(long src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Popcnt/X64::PopCount(System.UInt64)
    IL_0006: conv.u4
    IL_0007: ret

}
uint pop(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Popcnt/X64::PopCount(System.UInt64)
    IL_0006: conv.u4
    IL_0007: ret

}
byte posl(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.Bits::blsi(System.Byte)
    IL_0006: call System.Byte Z0.Pow2::inv<System.Byte>(System.Byte)
    IL_000B: ret

}
ushort posl(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.Bits::blsi(System.UInt16)
    IL_0006: call System.Byte Z0.Pow2::inv<System.UInt16>(System.UInt16)
    IL_000B: ret

}
uint posl(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 Z0.Bits::blsi(System.UInt32)
    IL_0006: call System.Byte Z0.Pow2::inv<System.UInt32>(System.UInt32)
    IL_000B: ret

}
ulong posl(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 Z0.Bits::blsi(System.UInt64)
    IL_0006: call System.UInt64 Z0.Pow2::inv(System.UInt64)
    IL_000B: ret

}
sbyte range(sbyte src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: conv.u1
    IL_0002: ldarg.1
    IL_0003: ldarg.2
    IL_0004: call System.Byte Z0.Bits::range(System.Byte,Z0.BitPos,Z0.BitPos)
    IL_0009: conv.i1
    IL_000A: ret

}
byte range(byte src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.BitPos::op_Implicit(Z0.BitPos)
    IL_0007: ldarga.s i1
    IL_0009: ldarga.s i0
    IL_000B: call Z0.BitSize Z0.BitPos::op_Subtraction(Z0.BitPos&,Z0.BitPos&)
    IL_0010: call System.Byte Z0.BitSize::op_Explicit(Z0.BitSize)
    IL_0015: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_001A: conv.u1
    IL_001B: ret

}
ushort range(ushort src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.BitPos::op_Implicit(Z0.BitPos)
    IL_0007: ldarga.s i1
    IL_0009: ldarga.s i0
    IL_000B: call Z0.BitSize Z0.BitPos::op_Subtraction(Z0.BitPos&,Z0.BitPos&)
    IL_0010: call System.Byte Z0.BitSize::op_Explicit(Z0.BitSize)
    IL_0015: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_001A: conv.u2
    IL_001B: ret

}
short range(short src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: conv.u2
    IL_0002: ldarg.1
    IL_0003: ldarg.2
    IL_0004: call System.UInt16 Z0.Bits::range(System.UInt16,Z0.BitPos,Z0.BitPos)
    IL_0009: conv.i2
    IL_000A: ret

}
uint range(uint src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.BitPos::op_Implicit(Z0.BitPos)
    IL_0007: ldarga.s i1
    IL_0009: ldarga.s i0
    IL_000B: call Z0.BitSize Z0.BitPos::op_Subtraction(Z0.BitPos&,Z0.BitPos&)
    IL_0010: call System.Byte Z0.BitSize::op_Explicit(Z0.BitSize)
    IL_0015: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_001A: ret

}
int range(int src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt32 Z0.Bits::range(System.UInt32,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
ulong range(ulong src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.Byte Z0.BitPos::op_Implicit(Z0.BitPos)
    IL_0007: ldarga.s i1
    IL_0009: ldarga.s i0
    IL_000B: call Z0.BitSize Z0.BitPos::op_Subtraction(Z0.BitPos&,Z0.BitPos&)
    IL_0010: call System.Byte Z0.BitSize::op_Explicit(Z0.BitSize)
    IL_0015: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::BitFieldExtract(System.UInt64,System.Byte,System.Byte)
    IL_001A: ret

}
long range(long src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt64 Z0.Bits::range(System.UInt64,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
float range(float src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Int32 Z0.Bits::range(System.Int32,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.Single System.BitConverter::Int32BitsToSingle(System.Int32)
    IL_0012: ret

}
double range(double src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0006: ldarg.1
    IL_0007: ldarg.2
    IL_0008: call System.Int64 Z0.Bits::range(System.Int64,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.Double System.BitConverter::Int64BitsToDouble(System.Int64)
    IL_0012: ret

}
uint rank(byte src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.Byte Z0.Bits::range(System.Byte,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.Byte)
    IL_0012: ret

}
uint rank(sbyte src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.SByte Z0.Bits::range(System.SByte,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.SByte)
    IL_0012: ret

}
uint rank(short src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.Int16 Z0.Bits::range(System.Int16,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.Int16)
    IL_0012: ret

}
uint rank(ushort src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.UInt16 Z0.Bits::range(System.UInt16,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.UInt16)
    IL_0012: ret

}
uint rank(int src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.Int32 Z0.Bits::range(System.Int32,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.Int32)
    IL_0012: ret

}
uint rank(uint src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.UInt32 Z0.Bits::range(System.UInt32,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.UInt32)
    IL_0012: ret

}
uint rank(long src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.Int64 Z0.Bits::range(System.Int64,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.Int64)
    IL_0012: ret

}
uint rank(ulong src, BitPos pos)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0007: ldarg.1
    IL_0008: call System.UInt64 Z0.Bits::range(System.UInt64,Z0.BitPos,Z0.BitPos)
    IL_000D: call System.UInt32 Z0.Bits::pop(System.UInt64)
    IL_0012: ret

}
Bit readbit(sbyte src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.SByte&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(byte src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Byte&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(short src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Int16&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(ushort src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.UInt16&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(int src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Int32&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(uint src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.UInt32&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(long src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Int64&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(ulong src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.UInt64&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(float src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Single&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
Bit readbit(double src, int pos)
{
    IL_0000: ldarga.s src
    IL_0002: ldarga.s pos
    IL_0004: call System.Boolean Z0.BitMask::test(System.Double&,System.Int32&)
    IL_0009: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000E: ret

}
ref Bit read(in sbyte src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.SByte&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in byte src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Byte&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in short src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Int16&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in ushort src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.UInt16&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in int src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Int32&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in uint src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.UInt32&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in long src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Int64&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in ulong src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.UInt64&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in float src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Single&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
ref Bit read(in double src, in int pos, out Bit dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call System.Boolean Z0.Bits::test(System.Double&,System.Int32&)
    IL_0008: call Z0.Bit Z0.Bit::op_Implicit(System.Boolean)
    IL_000D: stobj Z0.Bit
    IL_0012: ldarg.2
    IL_0013: ret

}
byte rev(byte src)
{
    IL_0000: ldarg.0
    IL_0001: conv.u8
    IL_0002: ldc.i4 -2145384446
    IL_0007: conv.u8
    IL_0008: mul
    IL_0009: ldc.i8 36578664720
    IL_0012: and
    IL_0013: ldc.i8 4311810305
    IL_001C: mul
    IL_001D: ldc.i4.s 32
    IL_001F: shr.un
    IL_0020: conv.u1
    IL_0021: ret

}
ushort rev(ushort src)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Byte Z0.Bits::hi(System.UInt16&)
    IL_0007: call System.Byte Z0.Bits::rev(System.Byte)
    IL_000C: ldarga.s src
    IL_000E: call System.Byte Z0.Bits::lo(System.UInt16&)
    IL_0013: call System.Byte Z0.Bits::rev(System.Byte)
    IL_0018: call System.UInt16 Z0.Bits::pack(System.Byte,System.Byte)
    IL_001D: ret

}
uint rev(uint src)
{
    IL_0000: ldarga.s src
    IL_0002: call System.UInt16 Z0.Bits::hi(System.UInt32&)
    IL_0007: call System.UInt16 Z0.Bits::rev(System.UInt16)
    IL_000C: ldarga.s src
    IL_000E: call System.UInt16 Z0.Bits::lo(System.UInt32&)
    IL_0013: call System.UInt16 Z0.Bits::rev(System.UInt16)
    IL_0018: call System.UInt32 Z0.Bits::pack(System.UInt16,System.UInt16)
    IL_001D: ret

}
ulong rev(ulong src)
{
    IL_0000: ldarga.s src
    IL_0002: call System.UInt32 Z0.Bits::hi(System.UInt64&)
    IL_0007: call System.UInt32 Z0.Bits::rev(System.UInt32)
    IL_000C: stloc.0
    IL_000D: ldloca.s V_0
    IL_000F: ldarga.s src
    IL_0011: call System.UInt32 Z0.Bits::lo(System.UInt64&)
    IL_0016: call System.UInt32 Z0.Bits::rev(System.UInt32)
    IL_001B: stloc.1
    IL_001C: ldloca.s V_1
    IL_001E: call System.UInt64 Z0.Bits::pack(System.UInt32&,System.UInt32&)
    IL_0023: ret

}
byte rotl(byte src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: ldarg.0
    IL_0007: ldc.i4.8
    IL_0008: ldarg.1
    IL_0009: sub
    IL_000A: ldc.i4.s 31
    IL_000C: and
    IL_000D: shr
    IL_000E: or
    IL_000F: conv.u1
    IL_0010: ret

}
ushort rotl(ushort src, ushort offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 16
    IL_0009: ldarg.1
    IL_000A: sub
    IL_000B: ldc.i4.s 31
    IL_000D: and
    IL_000E: shr
    IL_000F: or
    IL_0010: conv.u2
    IL_0011: ret

}
uint rotl(uint src, uint offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shl
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 32
    IL_0009: ldarg.1
    IL_000A: sub
    IL_000B: ldc.i4.s 31
    IL_000D: and
    IL_000E: shr.un
    IL_000F: or
    IL_0010: ret

}
ulong rotl(ulong src, ulong offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.i4
    IL_0003: ldc.i4.s 63
    IL_0005: and
    IL_0006: shl
    IL_0007: ldarg.0
    IL_0008: ldc.i4.s 64
    IL_000A: ldarg.1
    IL_000B: conv.i4
    IL_000C: sub
    IL_000D: ldc.i4.s 63
    IL_000F: and
    IL_0010: shr.un
    IL_0011: or
    IL_0012: ret

}
ref byte rotl(ref byte src, in byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u1
    IL_0003: ldarg.1
    IL_0004: ldind.u1
    IL_0005: call System.Byte Z0.Bits::rotl(System.Byte,System.Byte)
    IL_000A: stind.i1
    IL_000B: ldarg.0
    IL_000C: ret

}
ref ushort rotl(ref ushort src, in ushort offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u2
    IL_0003: ldarg.1
    IL_0004: ldind.u2
    IL_0005: call System.UInt16 Z0.Bits::rotl(System.UInt16,System.UInt16)
    IL_000A: stind.i2
    IL_000B: ldarg.0
    IL_000C: ret

}
ref uint rotl(ref uint src, in uint offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.u4
    IL_0003: ldarg.1
    IL_0004: ldind.u4
    IL_0005: call System.UInt32 Z0.Bits::rotl(System.UInt32,System.UInt32)
    IL_000A: stind.i4
    IL_000B: ldarg.0
    IL_000C: ret

}
ref ulong rotl(ref ulong src, in ulong offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldind.i8
    IL_0003: ldarg.1
    IL_0004: ldind.i8
    IL_0005: call System.UInt64 Z0.Bits::rotl(System.UInt64,System.UInt64)
    IL_000A: stind.i8
    IL_000B: ldarg.0
    IL_000C: ret

}
byte rotr(byte src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shr
    IL_0006: ldarg.0
    IL_0007: ldc.i4.8
    IL_0008: ldarg.1
    IL_0009: sub
    IL_000A: ldc.i4.s 31
    IL_000C: and
    IL_000D: shl
    IL_000E: or
    IL_000F: conv.u1
    IL_0010: ret

}
ushort rotr(ushort src, ushort offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shr
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 16
    IL_0009: ldarg.1
    IL_000A: sub
    IL_000B: ldc.i4.s 31
    IL_000D: and
    IL_000E: shl
    IL_000F: or
    IL_0010: conv.u2
    IL_0011: ret

}
uint rotr(uint src, uint offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldc.i4.s 31
    IL_0004: and
    IL_0005: shr.un
    IL_0006: ldarg.0
    IL_0007: ldc.i4.s 32
    IL_0009: ldarg.1
    IL_000A: sub
    IL_000B: ldc.i4.s 31
    IL_000D: and
    IL_000E: shl
    IL_000F: or
    IL_0010: ret

}
Vec256<ulong> xor(in Vec256<ulong> lhs, in Vec256<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
Vec256<float> xor(in Vec256<float> lhs, in Vec256<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: call Z0.Vec256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_0020: ret

}
Vec256<double> xor(in Vec256<double> lhs, in Vec256<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: call Z0.Vec256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_0020: ret

}
Vec128<sbyte> xor(in Vec128<sbyte> x0, in Vec128<sbyte> x1, in Vec128<sbyte> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.SByte>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_002B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0030: ret

}
Vec128<byte> xor(in Vec128<byte> x0, in Vec128<byte> x1, in Vec128<byte> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Byte>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_002B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0030: ret

}
Vec128<short> xor(in Vec128<short> x0, in Vec128<short> x1, in Vec128<short> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Int16>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_002B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0030: ret

}
Vec128<ushort> xor(in Vec128<ushort> x0, in Vec128<ushort> x1, in Vec128<ushort> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_002B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0030: ret

}
Vec128<int> xor(in Vec128<int> x0, in Vec128<int> x1, in Vec128<int> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Int32>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_002B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0030: ret

}
Vec128<uint> xor(in Vec128<uint> x0, in Vec128<uint> x1, in Vec128<uint> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_002B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0030: ret

}
Vec128<long> xor(in Vec128<long> x0, in Vec128<long> x1, in Vec128<long> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Int64>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_002B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0030: ret

}
Vec128<ulong> xor(in Vec128<ulong> x0, in Vec128<ulong> x1, in Vec128<ulong> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_002B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0030: ret

}
Vec128<float> xor(in Vec128<float> x0, in Vec128<float> x1, in Vec128<float> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::Xor(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Single>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::Xor(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_002B: call Z0.Vec128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_0030: ret

}
Vec128<double> xor(in Vec128<double> x0, in Vec128<double> x1, in Vec128<double> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec128`1<System.Double>
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_002B: call Z0.Vec128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_0030: ret

}
Vec256<byte> xor(in Vec256<byte> x0, in Vec256<byte> x1, in Vec256<byte> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Byte>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_002B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0030: ret

}
Vec256<short> xor(in Vec256<short> x0, in Vec256<short> x1, in Vec256<short> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Int16>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_002B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0030: ret

}
Vec256<sbyte> xor(in Vec256<sbyte> x0, in Vec256<sbyte> x1, in Vec256<sbyte> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.SByte>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_002B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0030: ret

}
Vec256<ushort> xor(in Vec256<ushort> x0, in Vec256<ushort> x1, in Vec256<ushort> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_002B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0030: ret

}
Vec256<int> xor(in Vec256<int> x0, in Vec256<int> x1, in Vec256<int> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Int32>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_002B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0030: ret

}
Vec256<uint> xor(in Vec256<uint> x0, in Vec256<uint> x1, in Vec256<uint> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_002B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0030: ret

}
Vec256<long> xor(in Vec256<long> x0, in Vec256<long> x1, in Vec256<long> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Int64>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_002B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0030: ret

}
Vec256<ulong> xor(in Vec256<ulong> x0, in Vec256<ulong> x1, in Vec256<ulong> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_002B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0030: ret

}
Vec256<float> xor(in Vec256<float> x0, in Vec256<float> x1, in Vec256<float> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Single>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_002B: call Z0.Vec256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_0030: ret

}
Vec256<double> xor(in Vec256<double> x0, in Vec256<double> x1, in Vec256<double> x2)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: ldarg.2
    IL_001C: ldobj Z0.Vec256`1<System.Double>
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::Xor(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_002B: call Z0.Vec256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_0030: ret

}
Vec128<ushort> xorsl(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt16> Z0.Bits::sll(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt16> Z0.Bits::xor(Z0.Vec128`1<System.UInt16>&,Z0.Vec128`1<System.UInt16>&)
    IL_0010: ret

}
Vec128<uint> xorsl(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt32> Z0.Bits::sll(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt32> Z0.Bits::xor(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0010: ret

}
Vec128<ulong> xorsl(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt64> Z0.Bits::sll(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0010: ret

}
Vec256<ushort> xorsl(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt16> Z0.Bits::xor(Z0.Vec256`1<System.UInt16>&,Z0.Vec256`1<System.UInt16>&)
    IL_0010: ret

}
Vec256<uint> xorsl(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt32> Z0.Bits::sll(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt32> Z0.Bits::xor(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0010: ret

}
Vec256<ulong> xorsl(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt64> Z0.Bits::sll(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt64> Z0.Bits::xor(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0010: ret

}
Vec128<uint> xorslv(in Vec128<uint> src, in Vec128<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt32> Z0.Bits::sllv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt32> Z0.Bits::xor(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0010: ret

}
Vec128<ulong> xorslv(in Vec128<ulong> src, in Vec128<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt64> Z0.Bits::sllv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0010: ret

}
Vec256<uint> xorslv(in Vec256<uint> src, in Vec256<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt32> Z0.Bits::sllv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt32> Z0.Bits::xor(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0010: ret

}
Vec256<ulong> xorslv(in Vec256<ulong> src, in Vec256<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt64> Z0.Bits::sllv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt64> Z0.Bits::xor(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0010: ret

}
Vec128<ushort> xorsr(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt16> Z0.Bits::srl(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt16> Z0.Bits::xor(Z0.Vec128`1<System.UInt16>&,Z0.Vec128`1<System.UInt16>&)
    IL_0010: ret

}
Vec128<uint> xorsr(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt32> Z0.Bits::srl(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt32> Z0.Bits::xor(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0010: ret

}
Vec128<ulong> xorsr(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0010: ret

}
Vec256<ushort> xorsr(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt16> Z0.Bits::xor(Z0.Vec256`1<System.UInt16>&,Z0.Vec256`1<System.UInt16>&)
    IL_0010: ret

}
Vec256<uint> xorsr(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt32> Z0.Bits::srl(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt32> Z0.Bits::xor(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0010: ret

}
Vec256<ulong> xorsr(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt64> Z0.Bits::srl(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt64> Z0.Bits::xor(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0010: ret

}
Vec128<uint> xorsrv(in Vec128<uint> src, in Vec128<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt32> Z0.Bits::srlv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt32> Z0.Bits::xor(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0010: ret

}
Vec128<ulong> xorsrv(in Vec128<ulong> src, in Vec128<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec128`1<System.UInt64> Z0.Bits::srlv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0010: ret

}
Vec256<uint> xorsrv(in Vec256<uint> src, in Vec256<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt32> Z0.Bits::srlv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt32> Z0.Bits::xor(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0010: ret

}
Vec256<ulong> xorsrv(in Vec256<ulong> src, in Vec256<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.0
    IL_0002: ldarg.1
    IL_0003: call Z0.Vec256`1<System.UInt64> Z0.Bits::srlv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0008: stloc.0
    IL_0009: ldloca.s V_0
    IL_000B: call Z0.Vec256`1<System.UInt64> Z0.Bits::xor(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0010: ret

}
byte andn(in byte lhs, in byte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u1
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::AndNot(System.UInt32,System.UInt32)
    IL_0009: conv.u1
    IL_000A: ret

}
sbyte andn(in sbyte lhs, in sbyte rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i1
    IL_0002: stloc.0
    IL_0003: ldloca.s V_0
    IL_0005: ldarg.1
    IL_0006: ldind.i1
    IL_0007: stloc.1
    IL_0008: ldloca.s V_1
    IL_000A: call System.Int32 Z0.Bits::andn(System.Int32&,System.Int32&)
    IL_000F: conv.i1
    IL_0010: ret

}
ushort andn(in ushort lhs, in ushort rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u2
    IL_0002: ldarg.1
    IL_0003: ldind.u2
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::AndNot(System.UInt32,System.UInt32)
    IL_0009: conv.u2
    IL_000A: ret

}
short andn(in short lhs, in short rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i2
    IL_0002: stloc.0
    IL_0003: ldloca.s V_0
    IL_0005: ldarg.1
    IL_0006: ldind.i2
    IL_0007: stloc.1
    IL_0008: ldloca.s V_1
    IL_000A: call System.Int32 Z0.Bits::andn(System.Int32&,System.Int32&)
    IL_000F: conv.i2
    IL_0010: ret

}
uint andn(in uint lhs, in uint rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: ldarg.1
    IL_0003: ldind.u4
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::AndNot(System.UInt32,System.UInt32)
    IL_0009: ret

}
int andn(in int lhs, in int rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i4
    IL_0002: ldarg.1
    IL_0003: ldind.i4
    IL_0004: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::AndNot(System.UInt32,System.UInt32)
    IL_0009: ret

}
long andn(in long lhs, in long rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldarg.1
    IL_0003: ldind.i8
    IL_0004: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::AndNot(System.UInt64,System.UInt64)
    IL_0009: ret

}
ulong andn(in ulong lhs, in ulong rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldarg.1
    IL_0003: ldind.i8
    IL_0004: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::AndNot(System.UInt64,System.UInt64)
    IL_0009: ret

}
sbyte between(in sbyte src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.SByte Z0.BitMask::between(System.SByte&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
byte between(in byte src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Byte Z0.BitMask::between(System.Byte&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
short between(in short src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int16 Z0.BitMask::between(System.Int16&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
ushort between(in ushort src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt16 Z0.BitMask::between(System.UInt16&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
uint between(in uint src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt32 Z0.BitMask::between(System.UInt32&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
int between(in int src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int32 Z0.BitMask::between(System.Int32&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
ulong between(in ulong src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.UInt64 Z0.BitMask::between(System.UInt64&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
long between(in long src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Int64 Z0.BitMask::between(System.Int64&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
float between(in float src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Single Z0.BitMask::between(System.Single&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
double between(in double src, BitPos i0, BitPos i1)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: ldarg.2
    IL_0003: call System.Double Z0.BitMask::between(System.Double&,Z0.BitPos,Z0.BitPos)
    IL_0008: ret

}
ref sbyte bitmap(in sbyte src, byte srcOffset, byte len, byte dstOffset, ref sbyte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.SByte Z0.Bits::extract(System.SByte&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.i1
    IL_001D: stind.i1
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref byte bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref byte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.u1
    IL_001D: stind.i1
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref short bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref short dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.i2
    IL_001D: stind.i2
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref ushort bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref ushort dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.u2
    IL_001D: stind.i2
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref int bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref int dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i4
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref uint bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref uint dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.u4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i4
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref long bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref long dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001A: conv.u8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref ulong bitmap(in byte src, byte srcOffset, byte len, byte dstOffset, ref ulong dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Byte Z0.Bits::extract(System.Byte&,System.Byte&,System.Byte&)
    IL_001A: conv.u8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref sbyte bitmap(in short src, byte srcOffset, byte len, byte dstOffset, ref sbyte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Int16 Z0.Bits::extract(System.Int16&,System.Byte&,System.Byte&)
    IL_001B: conv.i1
    IL_001C: or
    IL_001D: conv.i1
    IL_001E: stind.i1
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref byte bitmap(in short src, byte srcOffset, byte len, byte dstOffset, ref byte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Int16 Z0.Bits::extract(System.Int16&,System.Byte&,System.Byte&)
    IL_001B: conv.u1
    IL_001C: or
    IL_001D: conv.u1
    IL_001E: stind.i1
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref short bitmap(in short src, byte srcOffset, byte len, byte dstOffset, ref short dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Int16 Z0.Bits::extract(System.Int16&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.i2
    IL_001D: stind.i2
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref ushort bitmap(in short src, byte srcOffset, byte len, byte dstOffset, ref ushort dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.Int16 Z0.Bits::extract(System.Int16&,System.Byte&,System.Byte&)
    IL_001B: conv.u2
    IL_001C: or
    IL_001D: conv.u2
    IL_001E: stind.i2
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref ushort bitmap(in ushort src, byte srcOffset, byte len, byte dstOffset, ref ushort dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.UInt16 Z0.Bits::extract(System.UInt16&,System.Byte&,System.Byte&)
    IL_001B: or
    IL_001C: conv.u2
    IL_001D: stind.i2
    IL_001E: ldarg.s dst
    IL_0020: ret

}
ref uint bitmap(in ushort src, byte srcOffset, byte len, byte dstOffset, ref uint dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.u4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt16 Z0.Bits::extract(System.UInt16&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i4
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref ulong bitmap(in ushort src, byte srcOffset, byte len, byte dstOffset, ref ulong dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt16 Z0.Bits::extract(System.UInt16&,System.Byte&,System.Byte&)
    IL_001A: conv.u8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref int bitmap(in int src, byte srcOffset, byte len, byte dstOffset, ref int dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Int32 Z0.Bits::extract(System.Int32&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i4
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref long bitmap(in int src, byte srcOffset, byte len, byte dstOffset, ref long dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Int32 Z0.Bits::extract(System.Int32&,System.Byte&,System.Byte&)
    IL_001A: conv.i8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref ulong bitmap(in int src, byte srcOffset, byte len, byte dstOffset, ref ulong dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Int32 Z0.Bits::extract(System.Int32&,System.Byte&,System.Byte&)
    IL_001A: conv.u8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref uint bitmap(in uint src, byte srcOffset, byte len, byte dstOffset, ref uint dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.u4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt32 Z0.Bits::extract(System.UInt32&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i4
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref ulong bitmap(in uint src, byte srcOffset, byte len, byte dstOffset, ref ulong dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt32 Z0.Bits::extract(System.UInt32&,System.Byte&,System.Byte&)
    IL_001A: conv.u8
    IL_001B: or
    IL_001C: stind.i8
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref long bitmap(in long src, byte srcOffset, byte len, byte dstOffset, ref long dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.Int64 Z0.Bits::extract(System.Int64&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i8
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref sbyte bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref sbyte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001B: conv.i1
    IL_001C: or
    IL_001D: conv.i1
    IL_001E: stind.i1
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref byte bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref byte dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u1
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u1
    IL_000B: stind.i1
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u1
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001B: conv.u1
    IL_001C: or
    IL_001D: conv.u1
    IL_001E: stind.i1
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref short bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref short dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.i2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.i2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001B: conv.i2
    IL_001C: or
    IL_001D: conv.i2
    IL_001E: stind.i2
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref ushort bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref ushort dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u2
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: conv.u2
    IL_000B: stind.i2
    IL_000C: ldarg.s dst
    IL_000E: ldarg.s dst
    IL_0010: ldind.u2
    IL_0011: ldarg.0
    IL_0012: ldarga.s srcOffset
    IL_0014: ldarga.s len
    IL_0016: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001B: conv.u2
    IL_001C: or
    IL_001D: conv.u2
    IL_001E: stind.i2
    IL_001F: ldarg.s dst
    IL_0021: ret

}
ref int bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref int dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001A: conv.i4
    IL_001B: or
    IL_001C: stind.i4
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref uint bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref uint dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.u4
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 31
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i4
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.u4
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001A: conv.u4
    IL_001B: or
    IL_001C: stind.i4
    IL_001D: ldarg.s dst
    IL_001F: ret

}
ref long bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref long dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i8
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref ulong bitmap(in ulong src, byte srcOffset, byte len, byte dstOffset, ref ulong dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.s dst
    IL_0004: ldind.i8
    IL_0005: ldarg.3
    IL_0006: ldc.i4.s 63
    IL_0008: and
    IL_0009: shl
    IL_000A: stind.i8
    IL_000B: ldarg.s dst
    IL_000D: ldarg.s dst
    IL_000F: ldind.i8
    IL_0010: ldarg.0
    IL_0011: ldarga.s srcOffset
    IL_0013: ldarga.s len
    IL_0015: call System.UInt64 Z0.Bits::extract(System.UInt64&,System.Byte&,System.Byte&)
    IL_001A: or
    IL_001B: stind.i8
    IL_001C: ldarg.s dst
    IL_001E: ret

}
ref float bitmap(in float src, byte srcOffset, byte len, byte dstOffset, ref float dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.0
    IL_0003: ldind.r4
    IL_0004: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0009: stloc.0
    IL_000A: ldloca.s V_0
    IL_000C: ldarga.s srcOffset
    IL_000E: ldarga.s len
    IL_0010: call System.Int32 Z0.Bits::extract(System.Int32&,System.Byte&,System.Byte&)
    IL_0015: ldarg.3
    IL_0016: ldc.i4.s 31
    IL_0018: and
    IL_0019: shl
    IL_001A: conv.r4
    IL_001B: call System.Single& Z0.math::or(System.Single&,System.Single)
    IL_0020: pop
    IL_0021: ldarg.s dst
    IL_0023: ret

}
ref double bitmap(in double src, byte srcOffset, byte len, byte dstOffset, ref double dst)
{
    IL_0000: ldarg.s dst
    IL_0002: ldarg.0
    IL_0003: ldind.r8
    IL_0004: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0009: stloc.0
    IL_000A: ldloca.s V_0
    IL_000C: ldarga.s srcOffset
    IL_000E: ldarga.s len
    IL_0010: call System.Int64 Z0.Bits::extract(System.Int64&,System.Byte&,System.Byte&)
    IL_0015: ldarg.3
    IL_0016: ldc.i4.s 63
    IL_0018: and
    IL_0019: shl
    IL_001A: conv.r8
    IL_001B: call System.Double& Z0.math::or(System.Double&,System.Double)
    IL_0020: pop
    IL_0021: ldarg.s dst
    IL_0023: ret

}
byte blsi(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ExtractLowestSetBit(System.UInt32)
    IL_0006: conv.u1
    IL_0007: ret

}
ushort blsi(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ExtractLowestSetBit(System.UInt32)
    IL_0006: conv.u2
    IL_0007: ret

}
uint blsi(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ExtractLowestSetBit(System.UInt32)
    IL_0006: ret

}
ulong blsi(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::ExtractLowestSetBit(System.UInt64)
    IL_0006: ret

}
byte blsic(byte src)
{
    IL_0000: ldarg.0
    IL_0001: not
    IL_0002: ldarg.0
    IL_0003: ldc.i4.1
    IL_0004: sub
    IL_0005: or
    IL_0006: conv.u1
    IL_0007: ret

}
ushort blsic(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: not
    IL_0002: ldarg.0
    IL_0003: ldc.i4.1
    IL_0004: sub
    IL_0005: or
    IL_0006: conv.u2
    IL_0007: ret

}
uint blsic(uint src)
{
    IL_0000: ldarg.0
    IL_0001: not
    IL_0002: ldarg.0
    IL_0003: ldc.i4.1
    IL_0004: sub
    IL_0005: or
    IL_0006: ret

}
ulong blsic(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: not
    IL_0002: ldarg.0
    IL_0003: ldc.i4.1
    IL_0004: conv.i8
    IL_0005: sub
    IL_0006: or
    IL_0007: ret

}
byte blsmask(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::GetMaskUpToLowestSetBit(System.UInt32)
    IL_0006: conv.u1
    IL_0007: ret

}
ushort blsmask(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::GetMaskUpToLowestSetBit(System.UInt32)
    IL_0006: conv.u2
    IL_0007: ret

}
uint blsmask(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::GetMaskUpToLowestSetBit(System.UInt32)
    IL_0006: ret

}
ulong blsmask(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::GetMaskUpToLowestSetBit(System.UInt64)
    IL_0006: ret

}
byte blsr(byte src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ResetLowestSetBit(System.UInt32)
    IL_0006: conv.u1
    IL_0007: ret

}
ushort blsr(ushort src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ResetLowestSetBit(System.UInt32)
    IL_0006: conv.u2
    IL_0007: ret

}
uint blsr(uint src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::ResetLowestSetBit(System.UInt32)
    IL_0006: ret

}
ulong blsr(ulong src)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::ResetLowestSetBit(System.UInt64)
    IL_0006: ret

}
byte bzhi(byte src, uint index)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: conv.u1
    IL_0008: ret

}
ushort bzhi(ushort src, uint index)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: conv.u2
    IL_0008: ret

}
uint bzhi(uint src, uint index)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi2::ZeroHighBits(System.UInt32,System.UInt32)
    IL_0007: ret

}
ulong bzhi(ulong src, uint index)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: conv.u8
    IL_0003: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi2/X64::ZeroHighBits(System.UInt64,System.UInt64)
    IL_0008: ret

}
sbyte extract(in sbyte src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i1
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: conv.i1
    IL_000C: ret

}
byte extract(in byte src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u1
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: conv.u1
    IL_000C: ret

}
short extract(in short src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i2
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: conv.i2
    IL_000C: ret

}
ushort extract(in ushort src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u2
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: conv.u2
    IL_000C: ret

}
uint extract(in uint src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: ret

}
int extract(in int src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i4
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_000B: ret

}
long extract(in long src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::BitFieldExtract(System.UInt64,System.Byte,System.Byte)
    IL_000B: ret

}
ulong extract(in ulong src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldarg.1
    IL_0003: ldind.u1
    IL_0004: ldarg.2
    IL_0005: ldind.u1
    IL_0006: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::BitFieldExtract(System.UInt64,System.Byte,System.Byte)
    IL_000B: ret

}
uint extract(in float src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.r4
    IL_0002: call System.Int32 Z0.MathX::ToBits(System.Single)
    IL_0007: ldarg.1
    IL_0008: ldind.u1
    IL_0009: ldarg.2
    IL_000A: ldind.u1
    IL_000B: call System.UInt32 System.Runtime.Intrinsics.X86.Bmi1::BitFieldExtract(System.UInt32,System.Byte,System.Byte)
    IL_0010: ret

}
ulong extract(in double src, in byte start, in byte length)
{
    IL_0000: ldarg.0
    IL_0001: ldind.r8
    IL_0002: call System.Int64 Z0.MathX::ToBits(System.Double)
    IL_0007: ldarg.1
    IL_0008: ldind.u1
    IL_0009: ldarg.2
    IL_000A: ldind.u1
    IL_000B: call System.UInt64 System.Runtime.Intrinsics.X86.Bmi1/X64::BitFieldExtract(System.UInt64,System.Byte,System.Byte)
    IL_0010: ret

}
ushort hi(in uint src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: ldc.i4.s 16
    IL_0004: shr.un
    IL_0005: conv.u2
    IL_0006: ret

}
ushort lo(in uint src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.u4
    IL_0002: conv.u2
    IL_0003: ret

}
uint hi(in ulong src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: ldc.i4.s 32
    IL_0004: shr.un
    IL_0005: conv.u4
    IL_0006: ret

}
uint lo(in ulong src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i8
    IL_0002: conv.u4
    IL_0003: ret

}
sbyte hi(in sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i1
    IL_0002: ldc.i4.4
    IL_0003: shr
    IL_0004: conv.i1
    IL_0005: ret

}
sbyte lo(in sbyte src)
{
    IL_0000: ldarg.0
    IL_0001: ldind.i1
    IL_0002: ldc.i4.4
    IL_0003: shl
    IL_0004: conv.i1
    IL_0005: ldc.i4.4
    IL_0006: shr
    IL_0007: conv.i1
    IL_0008: ret

}
Vec256<int> or(in Vec256<int> lhs, in Vec256<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> or(in Vec256<uint> lhs, in Vec256<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> or(in Vec256<long> lhs, in Vec256<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
Vec256<ulong> or(in Vec256<ulong> lhs, in Vec256<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
Vec256<float> or(in Vec256<float> lhs, in Vec256<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::Or(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: call Z0.Vec256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_0020: ret

}
Vec256<double> or(in Vec256<double> lhs, in Vec256<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::Or(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: call Z0.Vec256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_0020: ret

}
void or(in Vec128<sbyte> lhs, in Vec128<sbyte> rhs, ref sbyte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.SByte> Z0.Bits::or(Z0.Vec128`1<System.SByte>&,Z0.Vec128`1<System.SByte>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.SByte>(Z0.Vec128`1<System.SByte>&,System.SByte&)
    IL_0010: ret

}
void or(in Vec128<byte> lhs, in Vec128<byte> rhs, ref byte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Byte> Z0.Bits::or(Z0.Vec128`1<System.Byte>&,Z0.Vec128`1<System.Byte>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Byte>(Z0.Vec128`1<System.Byte>&,System.Byte&)
    IL_0010: ret

}
void or(in Vec128<short> lhs, in Vec128<short> rhs, ref short dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Int16> Z0.Bits::or(Z0.Vec128`1<System.Int16>&,Z0.Vec128`1<System.Int16>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int16>(Z0.Vec128`1<System.Int16>&,System.Int16&)
    IL_0010: ret

}
void or(in Vec128<ushort> lhs, in Vec128<ushort> rhs, ref ushort dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt16> Z0.Bits::or(Z0.Vec128`1<System.UInt16>&,Z0.Vec128`1<System.UInt16>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt16>(Z0.Vec128`1<System.UInt16>&,System.UInt16&)
    IL_0010: ret

}
void or(in Vec128<int> lhs, in Vec128<int> rhs, ref int dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Int32> Z0.Bits::or(Z0.Vec128`1<System.Int32>&,Z0.Vec128`1<System.Int32>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int32>(Z0.Vec128`1<System.Int32>&,System.Int32&)
    IL_0010: ret

}
void or(in Vec128<uint> lhs, in Vec128<uint> rhs, ref uint dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt32> Z0.Bits::or(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt32>(Z0.Vec128`1<System.UInt32>&,System.UInt32&)
    IL_0010: ret

}
void or(in Vec128<long> lhs, in Vec128<long> rhs, ref long dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Int64> Z0.Bits::or(Z0.Vec128`1<System.Int64>&,Z0.Vec128`1<System.Int64>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int64>(Z0.Vec128`1<System.Int64>&,System.Int64&)
    IL_0010: ret

}
void or(in Vec128<ulong> lhs, in Vec128<ulong> rhs, ref ulong dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt64>(Z0.Vec128`1<System.UInt64>&,System.UInt64&)
    IL_0010: ret

}
void or(in Vec128<float> lhs, in Vec128<float> rhs, ref float dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Single> Z0.Bits::or(Z0.Vec128`1<System.Single>&,Z0.Vec128`1<System.Single>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Single>(Z0.Vec128`1<System.Single>&,System.Single&)
    IL_0010: ret

}
void or(in Vec128<double> lhs, in Vec128<double> rhs, ref double dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Double> Z0.Bits::or(Z0.Vec128`1<System.Double>&,Z0.Vec128`1<System.Double>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Double>(Z0.Vec128`1<System.Double>&,System.Double&)
    IL_0010: ret

}
void or(in Vec256<sbyte> lhs, in Vec256<sbyte> rhs, ref sbyte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.SByte> Z0.Bits::or(Z0.Vec256`1<System.SByte>&,Z0.Vec256`1<System.SByte>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.SByte>(Z0.Vec256`1<System.SByte>&,System.SByte&)
    IL_0010: ret

}
void or(in Vec256<byte> lhs, in Vec256<byte> rhs, ref byte dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Byte> Z0.Bits::or(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Byte>(Z0.Vec256`1<System.Byte>&,System.Byte&)
    IL_0010: ret

}
void or(in Vec256<short> lhs, in Vec256<short> rhs, ref short dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Int16> Z0.Bits::or(Z0.Vec256`1<System.Int16>&,Z0.Vec256`1<System.Int16>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int16>(Z0.Vec256`1<System.Int16>&,System.Int16&)
    IL_0010: ret

}
void or(in Vec256<ushort> lhs, in Vec256<ushort> rhs, ref ushort dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt16> Z0.Bits::or(Z0.Vec256`1<System.UInt16>&,Z0.Vec256`1<System.UInt16>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt16>(Z0.Vec256`1<System.UInt16>&,System.UInt16&)
    IL_0010: ret

}
void or(in Vec256<int> lhs, in Vec256<int> rhs, ref int dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Int32> Z0.Bits::or(Z0.Vec256`1<System.Int32>&,Z0.Vec256`1<System.Int32>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int32>(Z0.Vec256`1<System.Int32>&,System.Int32&)
    IL_0010: ret

}
void or(in Vec256<uint> lhs, in Vec256<uint> rhs, ref uint dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt32> Z0.Bits::or(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt32>(Z0.Vec256`1<System.UInt32>&,System.UInt32&)
    IL_0010: ret

}
void or(in Vec256<long> lhs, in Vec256<long> rhs, ref long dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Int64> Z0.Bits::or(Z0.Vec256`1<System.Int64>&,Z0.Vec256`1<System.Int64>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Int64>(Z0.Vec256`1<System.Int64>&,System.Int64&)
    IL_0010: ret

}
void or(in Vec256<ulong> lhs, in Vec256<ulong> rhs, ref ulong dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt64> Z0.Bits::or(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.UInt64>(Z0.Vec256`1<System.UInt64>&,System.UInt64&)
    IL_0010: ret

}
void or(in Vec256<float> lhs, in Vec256<float> rhs, ref float dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Single> Z0.Bits::or(Z0.Vec256`1<System.Single>&,Z0.Vec256`1<System.Single>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Single>(Z0.Vec256`1<System.Single>&,System.Single&)
    IL_0010: ret

}
void or(in Vec256<double> lhs, in Vec256<double> rhs, ref double dst)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Double> Z0.Bits::or(Z0.Vec256`1<System.Double>&,Z0.Vec256`1<System.Double>&)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.2
    IL_000B: call System.Void zfunc::vstore<System.Double>(Z0.Vec256`1<System.Double>&,System.Double&)
    IL_0010: ret

}
Vec128<sbyte> pack(in Vec128<short> lhs, in Vec128<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::PackSignedSaturate(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0020: ret

}
Vec128<byte> pack(in Vec128<ushort> lhs, in Vec128<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.UInt16>::As<System.Int16>()
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.UInt16>::As<System.Int16>()
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0020: ret

}
Vec128<short> pack(in Vec128<int> lhs, in Vec128<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::PackSignedSaturate(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0020: ret

}
Vec128<ushort> pack(in Vec128<uint> lhs, in Vec128<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.UInt32>::As<System.Int32>()
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.UInt32>::As<System.Int32>()
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse41::PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0020: ret

}
Vec256<sbyte> pack(in Vec256<short> lhs, in Vec256<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::PackSignedSaturate(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0020: ret

}
Vec256<byte> pack(in Vec256<ushort> lhs, in Vec256<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.UInt16>::As<System.Int16>()
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.UInt16>::As<System.Int16>()
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0020: ret

}
Vec256<short> pack(in Vec256<int> lhs, in Vec256<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::PackSignedSaturate(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0020: ret

}
Vec256<ushort> pack(in Vec256<uint> lhs, in Vec256<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.UInt32>::As<System.Int32>()
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.UInt32>::As<System.Int32>()
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0020: ret

}
Vec128<byte> rotl(in Vec128<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Byte> Z0.Bits::sll(Z0.Vec128`1<System.Byte>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.0
    IL_000B: ldc.i4.8
    IL_000C: ldarg.1
    IL_000D: sub
    IL_000E: conv.u1
    IL_000F: call Z0.Vec128`1<System.Byte> Z0.Bits::srl(Z0.Vec128`1<System.Byte>&,System.Byte)
    IL_0014: stloc.1
    IL_0015: ldloca.s V_1
    IL_0017: call Z0.Vec128`1<System.Byte> Z0.Bits::or(Z0.Vec128`1<System.Byte>&,Z0.Vec128`1<System.Byte>&)
    IL_001C: ret

}
Vec128<ushort> rotl(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt16> Z0.Bits::sll(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldarg.0
    IL_000B: ldc.i4.s 16
    IL_000D: ldarg.1
    IL_000E: sub
    IL_000F: conv.u1
    IL_0010: call Z0.Vec128`1<System.UInt16> Z0.Bits::srl(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0015: stloc.1
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt16> Z0.Bits::or(Z0.Vec128`1<System.UInt16>&,Z0.Vec128`1<System.UInt16>&)
    IL_001D: ret

}
Vec128<uint> rotl(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt32> Z0.Bits::sll(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 32
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec128`1<System.UInt32> Z0.Bits::srl(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt32> Z0.Bits::or(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_001D: ret

}
Vec128<ulong> rotl(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.Bits::sll(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 64
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_001D: ret

}
Vec256<byte> rotl(in Vec256<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Byte> Z0.Bits::sll(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.8
    IL_000A: ldarg.1
    IL_000B: sub
    IL_000C: conv.u1
    IL_000D: call Z0.Vec256`1<System.Byte> Z0.Bits::srl(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0012: stloc.1
    IL_0013: ldloca.s V_0
    IL_0015: ldloca.s V_1
    IL_0017: call Z0.Vec256`1<System.Byte> Z0.Bits::or(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_001C: ret

}
Vec256<ushort> rotl(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 16
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt16> Z0.Bits::or(Z0.Vec256`1<System.UInt16>&,Z0.Vec256`1<System.UInt16>&)
    IL_001D: ret

}
Vec256<uint> rotl(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt32> Z0.Bits::sll(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 32
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt32> Z0.Bits::srl(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt32> Z0.Bits::or(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_001D: ret

}
Vec256<ulong> rotl(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt64> Z0.Bits::sll(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 64
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt64> Z0.Bits::srl(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt64> Z0.Bits::or(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_001D: ret

}
Vec128<ulong> rotl(in Vec128<ulong> src, in Vec128<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.Bits::sllv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec128`1<System.UInt64> Z0.Bits::Vec128u64
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec128`1<System.UInt64> Z0.dinx::sub(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec128`1<System.UInt64> Z0.Bits::srlv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0026: ret

}
Vec128<uint> rotl(in Vec128<uint> src, in Vec128<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt32> Z0.Bits::sllv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec128`1<System.UInt32> Z0.Bits::Vec128u32
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec128`1<System.UInt32> Z0.dinx::sub(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec128`1<System.UInt32> Z0.Bits::srlv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec128`1<System.UInt32> Z0.Bits::or(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0026: ret

}
Vec256<ulong> rotl(in Vec256<ulong> src, in Vec256<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt64> Z0.Bits::sllv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec256`1<System.UInt64> Z0.Bits::Vec256u64
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec256`1<System.UInt64> Z0.dinx::sub(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec256`1<System.UInt64> Z0.Bits::srlv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec256`1<System.UInt64> Z0.Bits::or(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0026: ret

}
Vec256<uint> rotl(in Vec256<uint> src, in Vec256<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt32> Z0.Bits::sllv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec256`1<System.UInt32> Z0.Bits::Vec256u32
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec256`1<System.UInt32> Z0.dinx::sub(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec256`1<System.UInt32> Z0.Bits::srlv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec256`1<System.UInt32> Z0.Bits::or(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0026: ret

}
Vec128<byte> rotr(in Vec128<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.Byte> Z0.Bits::srl(Z0.Vec128`1<System.Byte>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.8
    IL_000A: ldarg.1
    IL_000B: sub
    IL_000C: conv.u1
    IL_000D: call Z0.Vec128`1<System.Byte> Z0.Bits::sll(Z0.Vec128`1<System.Byte>&,System.Byte)
    IL_0012: stloc.1
    IL_0013: ldloca.s V_0
    IL_0015: ldloca.s V_1
    IL_0017: call Z0.Vec128`1<System.Byte> Z0.Bits::or(Z0.Vec128`1<System.Byte>&,Z0.Vec128`1<System.Byte>&)
    IL_001C: ret

}
Vec128<ushort> rotr(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt16> Z0.Bits::srl(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 16
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec128`1<System.UInt16> Z0.Bits::sll(Z0.Vec128`1<System.UInt16>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt16> Z0.Bits::or(Z0.Vec128`1<System.UInt16>&,Z0.Vec128`1<System.UInt16>&)
    IL_001D: ret

}
Vec128<uint> rotr(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt32> Z0.Bits::srl(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 32
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec128`1<System.UInt32> Z0.Bits::sll(Z0.Vec128`1<System.UInt32>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt32> Z0.Bits::or(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_001D: ret

}
Vec128<ulong> rotr(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 64
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec128`1<System.UInt64> Z0.Bits::sll(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_001D: ret

}
Vec256<byte> rotr(in Vec256<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.Byte> Z0.Bits::srl(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.8
    IL_000A: ldarg.1
    IL_000B: sub
    IL_000C: conv.u1
    IL_000D: call Z0.Vec256`1<System.Byte> Z0.Bits::sll(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0012: stloc.1
    IL_0013: ldloca.s V_0
    IL_0015: ldloca.s V_1
    IL_0017: call Z0.Vec256`1<System.Byte> Z0.Bits::or(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_001C: ret

}
Vec256<ushort> rotr(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 16
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt16> Z0.Bits::or(Z0.Vec256`1<System.UInt16>&,Z0.Vec256`1<System.UInt16>&)
    IL_001D: ret

}
Vec256<uint> rotr(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt32> Z0.Bits::srl(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 32
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt32> Z0.Bits::sll(Z0.Vec256`1<System.UInt32>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt32> Z0.Bits::or(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_001D: ret

}
Vec256<ulong> rotr(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt64> Z0.Bits::srl(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldc.i4.s 64
    IL_000B: ldarg.1
    IL_000C: sub
    IL_000D: conv.u1
    IL_000E: call Z0.Vec256`1<System.UInt64> Z0.Bits::sll(Z0.Vec256`1<System.UInt64>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_0
    IL_0016: ldloca.s V_1
    IL_0018: call Z0.Vec256`1<System.UInt64> Z0.Bits::or(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_001D: ret

}
Vec128<uint> rotr(in Vec128<uint> src, Vec128<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarga.s offsets
    IL_0003: call Z0.Vec128`1<System.UInt32> Z0.Bits::srlv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0008: stloc.0
    IL_0009: ldarg.0
    IL_000A: ldsflda Z0.Vec128`1<System.UInt32> Z0.Bits::Vec128u32
    IL_000F: ldarga.s offsets
    IL_0011: call Z0.Vec128`1<System.UInt32> Z0.dinx::sub(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0016: stloc.2
    IL_0017: ldloca.s V_2
    IL_0019: call Z0.Vec128`1<System.UInt32> Z0.Bits::sllv(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_001E: stloc.1
    IL_001F: ldloca.s V_0
    IL_0021: ldloca.s V_1
    IL_0023: call Z0.Vec128`1<System.UInt32> Z0.Bits::or(Z0.Vec128`1<System.UInt32>&,Z0.Vec128`1<System.UInt32>&)
    IL_0028: ret

}
Vec128<ulong> rotr(in Vec128<ulong> src, in Vec128<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.Bits::srlv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec128`1<System.UInt64> Z0.Bits::Vec128u64
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec128`1<System.UInt64> Z0.dinx::sub(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec128`1<System.UInt64> Z0.Bits::sllv(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0026: ret

}
Vec256<uint> rotr(in Vec256<uint> src, in Vec256<uint> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt32> Z0.Bits::srlv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec256`1<System.UInt32> Z0.Bits::Vec256u32
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec256`1<System.UInt32> Z0.dinx::sub(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec256`1<System.UInt32> Z0.Bits::sllv(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec256`1<System.UInt32> Z0.Bits::or(Z0.Vec256`1<System.UInt32>&,Z0.Vec256`1<System.UInt32>&)
    IL_0026: ret

}
Vec256<ulong> rotr(in Vec256<ulong> src, in Vec256<ulong> offsets)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec256`1<System.UInt64> Z0.Bits::srlv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0007: stloc.0
    IL_0008: ldarg.0
    IL_0009: ldsflda Z0.Vec256`1<System.UInt64> Z0.Bits::Vec256u64
    IL_000E: ldarg.1
    IL_000F: call Z0.Vec256`1<System.UInt64> Z0.dinx::sub(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0014: stloc.2
    IL_0015: ldloca.s V_2
    IL_0017: call Z0.Vec256`1<System.UInt64> Z0.Bits::sllv(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_001C: stloc.1
    IL_001D: ldloca.s V_0
    IL_001F: ldloca.s V_1
    IL_0021: call Z0.Vec256`1<System.UInt64> Z0.Bits::or(Z0.Vec256`1<System.UInt64>&,Z0.Vec256`1<System.UInt64>&)
    IL_0026: ret

}
Vec128<byte> sll(in Vec128<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0008: pop
    IL_0009: ldsfld System.Int32 Z0.Vec256`1<System.UInt16>::Length
    IL_000E: stloc.3
    IL_000F: ldloc.3
    IL_0010: conv.u
    IL_0011: ldc.i4.2
    IL_0012: mul.ovf.un
    IL_0013: localloc
    IL_0015: ldloc.3
    IL_0016: newobj System.Void System.Span`1<System.UInt16>::.ctor(System.Void*,System.Int32)
    IL_001B: stloc.s V_4
    IL_001D: ldloc.s V_4
    IL_001F: stloc.1
    IL_0020: ldloca.s V_0
    IL_0022: ldarg.1
    IL_0023: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0028: stloc.s V_5
    IL_002A: ldloca.s V_5
    IL_002C: ldloca.s V_1
    IL_002E: ldc.i4.0
    IL_002F: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0034: call System.Void zfunc::vstore<System.UInt16>(Z0.Vec256`1<System.UInt16>&,System.UInt16&)
    IL_0039: ldc.i4.0
    IL_003A: stloc.2
    IL_003B: ldloca.s V_1
    IL_003D: ldloc.2
    IL_003E: dup
    IL_003F: ldc.i4.1
    IL_0040: add
    IL_0041: stloc.2
    IL_0042: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0047: ldind.u2
    IL_0048: conv.u1
    IL_0049: ldloca.s V_1
    IL_004B: ldloc.2
    IL_004C: dup
    IL_004D: ldc.i4.1
    IL_004E: add
    IL_004F: stloc.2
    IL_0050: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0055: ldind.u2
    IL_0056: conv.u1
    IL_0057: ldloca.s V_1
    IL_0059: ldloc.2
    IL_005A: dup
    IL_005B: ldc.i4.1
    IL_005C: add
    IL_005D: stloc.2
    IL_005E: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0063: ldind.u2
    IL_0064: conv.u1
    IL_0065: ldloca.s V_1
    IL_0067: ldloc.2
    IL_0068: dup
    IL_0069: ldc.i4.1
    IL_006A: add
    IL_006B: stloc.2
    IL_006C: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0071: ldind.u2
    IL_0072: conv.u1
    IL_0073: ldloca.s V_1
    IL_0075: ldloc.2
    IL_0076: dup
    IL_0077: ldc.i4.1
    IL_0078: add
    IL_0079: stloc.2
    IL_007A: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_007F: ldind.u2
    IL_0080: conv.u1
    IL_0081: ldloca.s V_1
    IL_0083: ldloc.2
    IL_0084: dup
    IL_0085: ldc.i4.1
    IL_0086: add
    IL_0087: stloc.2
    IL_0088: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_008D: ldind.u2
    IL_008E: conv.u1
    IL_008F: ldloca.s V_1
    IL_0091: ldloc.2
    IL_0092: dup
    IL_0093: ldc.i4.1
    IL_0094: add
    IL_0095: stloc.2
    IL_0096: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_009B: ldind.u2
    IL_009C: conv.u1
    IL_009D: ldloca.s V_1
    IL_009F: ldloc.2
    IL_00A0: dup
    IL_00A1: ldc.i4.1
    IL_00A2: add
    IL_00A3: stloc.2
    IL_00A4: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00A9: ldind.u2
    IL_00AA: conv.u1
    IL_00AB: ldloca.s V_1
    IL_00AD: ldloc.2
    IL_00AE: dup
    IL_00AF: ldc.i4.1
    IL_00B0: add
    IL_00B1: stloc.2
    IL_00B2: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00B7: ldind.u2
    IL_00B8: conv.u1
    IL_00B9: ldloca.s V_1
    IL_00BB: ldloc.2
    IL_00BC: dup
    IL_00BD: ldc.i4.1
    IL_00BE: add
    IL_00BF: stloc.2
    IL_00C0: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00C5: ldind.u2
    IL_00C6: conv.u1
    IL_00C7: ldloca.s V_1
    IL_00C9: ldloc.2
    IL_00CA: dup
    IL_00CB: ldc.i4.1
    IL_00CC: add
    IL_00CD: stloc.2
    IL_00CE: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00D3: ldind.u2
    IL_00D4: conv.u1
    IL_00D5: ldloca.s V_1
    IL_00D7: ldloc.2
    IL_00D8: dup
    IL_00D9: ldc.i4.1
    IL_00DA: add
    IL_00DB: stloc.2
    IL_00DC: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00E1: ldind.u2
    IL_00E2: conv.u1
    IL_00E3: ldloca.s V_1
    IL_00E5: ldloc.2
    IL_00E6: dup
    IL_00E7: ldc.i4.1
    IL_00E8: add
    IL_00E9: stloc.2
    IL_00EA: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00EF: ldind.u2
    IL_00F0: conv.u1
    IL_00F1: ldloca.s V_1
    IL_00F3: ldloc.2
    IL_00F4: dup
    IL_00F5: ldc.i4.1
    IL_00F6: add
    IL_00F7: stloc.2
    IL_00F8: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00FD: ldind.u2
    IL_00FE: conv.u1
    IL_00FF: ldloca.s V_1
    IL_0101: ldloc.2
    IL_0102: dup
    IL_0103: ldc.i4.1
    IL_0104: add
    IL_0105: stloc.2
    IL_0106: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_010B: ldind.u2
    IL_010C: conv.u1
    IL_010D: ldloca.s V_1
    IL_010F: ldloc.2
    IL_0110: dup
    IL_0111: ldc.i4.1
    IL_0112: add
    IL_0113: stloc.2
    IL_0114: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0119: ldind.u2
    IL_011A: conv.u1
    IL_011B: call Z0.Vec128`1<System.Byte> Z0.Vec128::FromBytes(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
    IL_0120: ret

}
Vec128<sbyte> sll(in Vec128<sbyte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vec256`1<System.Int16>& Z0.dinx::convert(Z0.Vec128`1<System.SByte>&,Z0.Vec256`1<System.Int16>&)
    IL_0008: pop
    IL_0009: ldsfld System.Int32 Z0.Vec256`1<System.Int16>::Length
    IL_000E: stloc.3
    IL_000F: ldloc.3
    IL_0010: conv.u
    IL_0011: ldc.i4.2
    IL_0012: mul.ovf.un
    IL_0013: localloc
    IL_0015: ldloc.3
    IL_0016: newobj System.Void System.Span`1<System.Int16>::.ctor(System.Void*,System.Int32)
    IL_001B: stloc.s V_4
    IL_001D: ldloc.s V_4
    IL_001F: stloc.1
    IL_0020: ldloca.s V_0
    IL_0022: ldarg.1
    IL_0023: call Z0.Vec256`1<System.Int16> Z0.Bits::sll(Z0.Vec256`1<System.Int16>&,System.Byte)
    IL_0028: stloc.s V_5
    IL_002A: ldloca.s V_5
    IL_002C: ldloca.s V_1
    IL_002E: ldc.i4.0
    IL_002F: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0034: call System.Void zfunc::vstore<System.Int16>(Z0.Vec256`1<System.Int16>&,System.Int16&)
    IL_0039: ldc.i4.0
    IL_003A: stloc.2
    IL_003B: ldloca.s V_1
    IL_003D: ldloc.2
    IL_003E: dup
    IL_003F: ldc.i4.1
    IL_0040: add
    IL_0041: stloc.2
    IL_0042: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0047: ldind.i2
    IL_0048: conv.i1
    IL_0049: ldloca.s V_1
    IL_004B: ldloc.2
    IL_004C: dup
    IL_004D: ldc.i4.1
    IL_004E: add
    IL_004F: stloc.2
    IL_0050: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0055: ldind.i2
    IL_0056: conv.i1
    IL_0057: ldloca.s V_1
    IL_0059: ldloc.2
    IL_005A: dup
    IL_005B: ldc.i4.1
    IL_005C: add
    IL_005D: stloc.2
    IL_005E: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0063: ldind.i2
    IL_0064: conv.i1
    IL_0065: ldloca.s V_1
    IL_0067: ldloc.2
    IL_0068: dup
    IL_0069: ldc.i4.1
    IL_006A: add
    IL_006B: stloc.2
    IL_006C: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0071: ldind.i2
    IL_0072: conv.i1
    IL_0073: ldloca.s V_1
    IL_0075: ldloc.2
    IL_0076: dup
    IL_0077: ldc.i4.1
    IL_0078: add
    IL_0079: stloc.2
    IL_007A: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_007F: ldind.i2
    IL_0080: conv.i1
    IL_0081: ldloca.s V_1
    IL_0083: ldloc.2
    IL_0084: dup
    IL_0085: ldc.i4.1
    IL_0086: add
    IL_0087: stloc.2
    IL_0088: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_008D: ldind.i2
    IL_008E: conv.i1
    IL_008F: ldloca.s V_1
    IL_0091: ldloc.2
    IL_0092: dup
    IL_0093: ldc.i4.1
    IL_0094: add
    IL_0095: stloc.2
    IL_0096: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_009B: ldind.i2
    IL_009C: conv.i1
    IL_009D: ldloca.s V_1
    IL_009F: ldloc.2
    IL_00A0: dup
    IL_00A1: ldc.i4.1
    IL_00A2: add
    IL_00A3: stloc.2
    IL_00A4: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00A9: ldind.i2
    IL_00AA: conv.i1
    IL_00AB: ldloca.s V_1
    IL_00AD: ldloc.2
    IL_00AE: dup
    IL_00AF: ldc.i4.1
    IL_00B0: add
    IL_00B1: stloc.2
    IL_00B2: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00B7: ldind.i2
    IL_00B8: conv.i1
    IL_00B9: ldloca.s V_1
    IL_00BB: ldloc.2
    IL_00BC: dup
    IL_00BD: ldc.i4.1
    IL_00BE: add
    IL_00BF: stloc.2
    IL_00C0: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00C5: ldind.i2
    IL_00C6: conv.i1
    IL_00C7: ldloca.s V_1
    IL_00C9: ldloc.2
    IL_00CA: dup
    IL_00CB: ldc.i4.1
    IL_00CC: add
    IL_00CD: stloc.2
    IL_00CE: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00D3: ldind.i2
    IL_00D4: conv.i1
    IL_00D5: ldloca.s V_1
    IL_00D7: ldloc.2
    IL_00D8: dup
    IL_00D9: ldc.i4.1
    IL_00DA: add
    IL_00DB: stloc.2
    IL_00DC: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00E1: ldind.i2
    IL_00E2: conv.i1
    IL_00E3: ldloca.s V_1
    IL_00E5: ldloc.2
    IL_00E6: dup
    IL_00E7: ldc.i4.1
    IL_00E8: add
    IL_00E9: stloc.2
    IL_00EA: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00EF: ldind.i2
    IL_00F0: conv.i1
    IL_00F1: ldloca.s V_1
    IL_00F3: ldloc.2
    IL_00F4: dup
    IL_00F5: ldc.i4.1
    IL_00F6: add
    IL_00F7: stloc.2
    IL_00F8: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00FD: ldind.i2
    IL_00FE: conv.i1
    IL_00FF: ldloca.s V_1
    IL_0101: ldloc.2
    IL_0102: dup
    IL_0103: ldc.i4.1
    IL_0104: add
    IL_0105: stloc.2
    IL_0106: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_010B: ldind.i2
    IL_010C: conv.i1
    IL_010D: ldloca.s V_1
    IL_010F: ldloc.2
    IL_0110: dup
    IL_0111: ldc.i4.1
    IL_0112: add
    IL_0113: stloc.2
    IL_0114: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0119: ldind.i2
    IL_011A: conv.i1
    IL_011B: call Z0.Vec128`1<System.SByte> Z0.Vec128::FromParts(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)
    IL_0120: ret

}
Vec128<short> sll(in Vec128<short> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0016: ret

}
Vec128<ushort> sll(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0016: ret

}
Vec128<int> sll(in Vec128<int> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0016: ret

}
Vec128<uint> sll(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0016: ret

}
Vec128<long> sll(in Vec128<long> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0016: ret

}
Vec128<ulong> sll(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0016: ret

}
Vec256<byte> sll(in Vec256<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0007: stloc.s V_12
    IL_0009: ldloca.s V_12
    IL_000B: ldloca.s V_11
    IL_000D: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0012: stloc.0
    IL_0013: ldarg.0
    IL_0014: ldc.i4.1
    IL_0015: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_001A: stloc.s V_14
    IL_001C: ldloca.s V_14
    IL_001E: ldloca.s V_13
    IL_0020: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0025: stloc.1
    IL_0026: ldloc.0
    IL_0027: ldarg.1
    IL_0028: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_002D: stloc.s V_15
    IL_002F: ldloca.s V_15
    IL_0031: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.UInt16>::As<System.Byte>()
    IL_0036: stloc.2
    IL_0037: ldloc.1
    IL_0038: ldarg.1
    IL_0039: call Z0.Vec256`1<System.UInt16> Z0.Bits::sll(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_003E: stloc.s V_15
    IL_0040: ldloca.s V_15
    IL_0042: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.UInt16>::As<System.Byte>()
    IL_0047: stloc.3
    IL_0048: call Z0.Vec256`1<System.Byte>& modreq(System.Runtime.InteropServices.InAttribute) Z0.Vec256Pattern::ClearAlt<System.Byte>()
    IL_004D: stloc.s V_4
    IL_004F: ldloca.s V_2
    IL_0051: ldloc.s V_4
    IL_0053: call Z0.Vec256`1<System.Byte> Z0.dinx::shuffle(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0058: stloc.s V_5
    IL_005A: ldloca.s V_3
    IL_005C: ldloc.s V_4
    IL_005E: call Z0.Vec256`1<System.Byte> Z0.dinx::shuffle(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0063: stloc.s V_6
    IL_0065: call Z0.Vec256`1<System.Byte>& modreq(System.Runtime.InteropServices.InAttribute) Z0.Vec256Pattern::LaneMerge<System.Byte>()
    IL_006A: stloc.s V_7
    IL_006C: ldloca.s V_5
    IL_006E: ldloc.s V_7
    IL_0070: call Z0.Vec256`1<System.Byte> Z0.dinx::permute(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0075: stloc.s V_8
    IL_0077: ldloca.s V_6
    IL_0079: ldloc.s V_7
    IL_007B: call Z0.Vec256`1<System.Byte> Z0.dinx::permute(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0080: stloc.s V_9
    IL_0082: ldloca.s V_10
    IL_0084: initobj Z0.Vec256`1<System.Byte>
    IL_008A: ldloca.s V_8
    IL_008C: ldc.i4.0
    IL_008D: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0092: stloc.s V_16
    IL_0094: ldloca.s V_16
    IL_0096: ldloca.s V_9
    IL_0098: ldc.i4.0
    IL_0099: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_009E: stloc.s V_17
    IL_00A0: ldloca.s V_17
    IL_00A2: ldloca.s V_10
    IL_00A4: call Z0.Vec256`1<System.Byte>& Z0.dinx::insert(Z0.Vec128`1<System.Byte>&,Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_00A9: pop
    IL_00AA: ldloc.s V_10
    IL_00AC: ret

}
Vec256<short> sll(in Vec256<short> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: ret

}
Vec256<ushort> sll(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0016: ret

}
Vec256<int> sll(in Vec256<int> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0016: ret

}
Vec256<uint> sll(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0016: ret

}
Vec256<long> sll(in Vec256<long> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0016: ret

}
Vec256<ulong> sll(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0016: ret

}
Vec128<int> sllv(in Vec128<int> src, in Vec128<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> sllv(in Vec128<uint> src, in Vec128<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> sllv(in Vec128<long> src, in Vec128<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> sllv(in Vec128<ulong> src, in Vec128<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec256<int> sllv(in Vec256<int> src, in Vec256<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> sllv(in Vec256<uint> src, in Vec256<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> sllv(in Vec256<long> src, in Vec256<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
Vec256<ulong> sllv(in Vec256<ulong> src, in Vec256<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
Vec256<short> sra(in Vec256<short> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: ret

}
Vec256<int> sra(in Vec256<int> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0016: ret

}
Vec128<int> srav(in Vec128<int> src, in Vec128<uint> control)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec256<int> srav(in Vec256<int> src, in Vec256<uint> control)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec128<byte> srl(in Vec128<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0008: pop
    IL_0009: ldsfld System.Int32 Z0.Vec256`1<System.UInt16>::Length
    IL_000E: stloc.3
    IL_000F: ldloc.3
    IL_0010: conv.u
    IL_0011: ldc.i4.2
    IL_0012: mul.ovf.un
    IL_0013: localloc
    IL_0015: ldloc.3
    IL_0016: newobj System.Void System.Span`1<System.UInt16>::.ctor(System.Void*,System.Int32)
    IL_001B: stloc.s V_4
    IL_001D: ldloc.s V_4
    IL_001F: stloc.1
    IL_0020: ldloca.s V_0
    IL_0022: ldarg.1
    IL_0023: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_0028: stloc.s V_5
    IL_002A: ldloca.s V_5
    IL_002C: ldloca.s V_1
    IL_002E: ldc.i4.0
    IL_002F: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0034: call System.Void zfunc::vstore<System.UInt16>(Z0.Vec256`1<System.UInt16>&,System.UInt16&)
    IL_0039: ldc.i4.0
    IL_003A: stloc.2
    IL_003B: ldloca.s V_1
    IL_003D: ldloc.2
    IL_003E: dup
    IL_003F: ldc.i4.1
    IL_0040: add
    IL_0041: stloc.2
    IL_0042: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0047: ldind.u2
    IL_0048: conv.u1
    IL_0049: ldloca.s V_1
    IL_004B: ldloc.2
    IL_004C: dup
    IL_004D: ldc.i4.1
    IL_004E: add
    IL_004F: stloc.2
    IL_0050: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0055: ldind.u2
    IL_0056: conv.u1
    IL_0057: ldloca.s V_1
    IL_0059: ldloc.2
    IL_005A: dup
    IL_005B: ldc.i4.1
    IL_005C: add
    IL_005D: stloc.2
    IL_005E: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0063: ldind.u2
    IL_0064: conv.u1
    IL_0065: ldloca.s V_1
    IL_0067: ldloc.2
    IL_0068: dup
    IL_0069: ldc.i4.1
    IL_006A: add
    IL_006B: stloc.2
    IL_006C: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0071: ldind.u2
    IL_0072: conv.u1
    IL_0073: ldloca.s V_1
    IL_0075: ldloc.2
    IL_0076: dup
    IL_0077: ldc.i4.1
    IL_0078: add
    IL_0079: stloc.2
    IL_007A: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_007F: ldind.u2
    IL_0080: conv.u1
    IL_0081: ldloca.s V_1
    IL_0083: ldloc.2
    IL_0084: dup
    IL_0085: ldc.i4.1
    IL_0086: add
    IL_0087: stloc.2
    IL_0088: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_008D: ldind.u2
    IL_008E: conv.u1
    IL_008F: ldloca.s V_1
    IL_0091: ldloc.2
    IL_0092: dup
    IL_0093: ldc.i4.1
    IL_0094: add
    IL_0095: stloc.2
    IL_0096: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_009B: ldind.u2
    IL_009C: conv.u1
    IL_009D: ldloca.s V_1
    IL_009F: ldloc.2
    IL_00A0: dup
    IL_00A1: ldc.i4.1
    IL_00A2: add
    IL_00A3: stloc.2
    IL_00A4: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00A9: ldind.u2
    IL_00AA: conv.u1
    IL_00AB: ldloca.s V_1
    IL_00AD: ldloc.2
    IL_00AE: dup
    IL_00AF: ldc.i4.1
    IL_00B0: add
    IL_00B1: stloc.2
    IL_00B2: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00B7: ldind.u2
    IL_00B8: conv.u1
    IL_00B9: ldloca.s V_1
    IL_00BB: ldloc.2
    IL_00BC: dup
    IL_00BD: ldc.i4.1
    IL_00BE: add
    IL_00BF: stloc.2
    IL_00C0: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00C5: ldind.u2
    IL_00C6: conv.u1
    IL_00C7: ldloca.s V_1
    IL_00C9: ldloc.2
    IL_00CA: dup
    IL_00CB: ldc.i4.1
    IL_00CC: add
    IL_00CD: stloc.2
    IL_00CE: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00D3: ldind.u2
    IL_00D4: conv.u1
    IL_00D5: ldloca.s V_1
    IL_00D7: ldloc.2
    IL_00D8: dup
    IL_00D9: ldc.i4.1
    IL_00DA: add
    IL_00DB: stloc.2
    IL_00DC: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00E1: ldind.u2
    IL_00E2: conv.u1
    IL_00E3: ldloca.s V_1
    IL_00E5: ldloc.2
    IL_00E6: dup
    IL_00E7: ldc.i4.1
    IL_00E8: add
    IL_00E9: stloc.2
    IL_00EA: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00EF: ldind.u2
    IL_00F0: conv.u1
    IL_00F1: ldloca.s V_1
    IL_00F3: ldloc.2
    IL_00F4: dup
    IL_00F5: ldc.i4.1
    IL_00F6: add
    IL_00F7: stloc.2
    IL_00F8: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_00FD: ldind.u2
    IL_00FE: conv.u1
    IL_00FF: ldloca.s V_1
    IL_0101: ldloc.2
    IL_0102: dup
    IL_0103: ldc.i4.1
    IL_0104: add
    IL_0105: stloc.2
    IL_0106: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_010B: ldind.u2
    IL_010C: conv.u1
    IL_010D: ldloca.s V_1
    IL_010F: ldloc.2
    IL_0110: dup
    IL_0111: ldc.i4.1
    IL_0112: add
    IL_0113: stloc.2
    IL_0114: call System.UInt16& System.Span`1<System.UInt16>::get_Item(System.Int32)
    IL_0119: ldind.u2
    IL_011A: conv.u1
    IL_011B: call Z0.Vec128`1<System.Byte> Z0.Vec128::FromBytes(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
    IL_0120: ret

}
Vec128<sbyte> srl(in Vec128<sbyte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldloca.s V_0
    IL_0003: call Z0.Vec256`1<System.Int16>& Z0.dinx::convert(Z0.Vec128`1<System.SByte>&,Z0.Vec256`1<System.Int16>&)
    IL_0008: pop
    IL_0009: ldsfld System.Int32 Z0.Vec256`1<System.Int16>::Length
    IL_000E: stloc.3
    IL_000F: ldloc.3
    IL_0010: conv.u
    IL_0011: ldc.i4.2
    IL_0012: mul.ovf.un
    IL_0013: localloc
    IL_0015: ldloc.3
    IL_0016: newobj System.Void System.Span`1<System.Int16>::.ctor(System.Void*,System.Int32)
    IL_001B: stloc.s V_4
    IL_001D: ldloc.s V_4
    IL_001F: stloc.1
    IL_0020: ldloca.s V_0
    IL_0022: ldarg.1
    IL_0023: call Z0.Vec256`1<System.Int16> Z0.Bits::srl(Z0.Vec256`1<System.Int16>&,System.Byte)
    IL_0028: stloc.s V_5
    IL_002A: ldloca.s V_5
    IL_002C: ldloca.s V_1
    IL_002E: ldc.i4.0
    IL_002F: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0034: call System.Void zfunc::vstore<System.Int16>(Z0.Vec256`1<System.Int16>&,System.Int16&)
    IL_0039: ldc.i4.0
    IL_003A: stloc.2
    IL_003B: ldloca.s V_1
    IL_003D: ldloc.2
    IL_003E: dup
    IL_003F: ldc.i4.1
    IL_0040: add
    IL_0041: stloc.2
    IL_0042: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0047: ldind.i2
    IL_0048: conv.i1
    IL_0049: ldloca.s V_1
    IL_004B: ldloc.2
    IL_004C: dup
    IL_004D: ldc.i4.1
    IL_004E: add
    IL_004F: stloc.2
    IL_0050: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0055: ldind.i2
    IL_0056: conv.i1
    IL_0057: ldloca.s V_1
    IL_0059: ldloc.2
    IL_005A: dup
    IL_005B: ldc.i4.1
    IL_005C: add
    IL_005D: stloc.2
    IL_005E: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0063: ldind.i2
    IL_0064: conv.i1
    IL_0065: ldloca.s V_1
    IL_0067: ldloc.2
    IL_0068: dup
    IL_0069: ldc.i4.1
    IL_006A: add
    IL_006B: stloc.2
    IL_006C: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0071: ldind.i2
    IL_0072: conv.i1
    IL_0073: ldloca.s V_1
    IL_0075: ldloc.2
    IL_0076: dup
    IL_0077: ldc.i4.1
    IL_0078: add
    IL_0079: stloc.2
    IL_007A: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_007F: ldind.i2
    IL_0080: conv.i1
    IL_0081: ldloca.s V_1
    IL_0083: ldloc.2
    IL_0084: dup
    IL_0085: ldc.i4.1
    IL_0086: add
    IL_0087: stloc.2
    IL_0088: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_008D: ldind.i2
    IL_008E: conv.i1
    IL_008F: ldloca.s V_1
    IL_0091: ldloc.2
    IL_0092: dup
    IL_0093: ldc.i4.1
    IL_0094: add
    IL_0095: stloc.2
    IL_0096: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_009B: ldind.i2
    IL_009C: conv.i1
    IL_009D: ldloca.s V_1
    IL_009F: ldloc.2
    IL_00A0: dup
    IL_00A1: ldc.i4.1
    IL_00A2: add
    IL_00A3: stloc.2
    IL_00A4: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00A9: ldind.i2
    IL_00AA: conv.i1
    IL_00AB: ldloca.s V_1
    IL_00AD: ldloc.2
    IL_00AE: dup
    IL_00AF: ldc.i4.1
    IL_00B0: add
    IL_00B1: stloc.2
    IL_00B2: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00B7: ldind.i2
    IL_00B8: conv.i1
    IL_00B9: ldloca.s V_1
    IL_00BB: ldloc.2
    IL_00BC: dup
    IL_00BD: ldc.i4.1
    IL_00BE: add
    IL_00BF: stloc.2
    IL_00C0: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00C5: ldind.i2
    IL_00C6: conv.i1
    IL_00C7: ldloca.s V_1
    IL_00C9: ldloc.2
    IL_00CA: dup
    IL_00CB: ldc.i4.1
    IL_00CC: add
    IL_00CD: stloc.2
    IL_00CE: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00D3: ldind.i2
    IL_00D4: conv.i1
    IL_00D5: ldloca.s V_1
    IL_00D7: ldloc.2
    IL_00D8: dup
    IL_00D9: ldc.i4.1
    IL_00DA: add
    IL_00DB: stloc.2
    IL_00DC: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00E1: ldind.i2
    IL_00E2: conv.i1
    IL_00E3: ldloca.s V_1
    IL_00E5: ldloc.2
    IL_00E6: dup
    IL_00E7: ldc.i4.1
    IL_00E8: add
    IL_00E9: stloc.2
    IL_00EA: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00EF: ldind.i2
    IL_00F0: conv.i1
    IL_00F1: ldloca.s V_1
    IL_00F3: ldloc.2
    IL_00F4: dup
    IL_00F5: ldc.i4.1
    IL_00F6: add
    IL_00F7: stloc.2
    IL_00F8: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_00FD: ldind.i2
    IL_00FE: conv.i1
    IL_00FF: ldloca.s V_1
    IL_0101: ldloc.2
    IL_0102: dup
    IL_0103: ldc.i4.1
    IL_0104: add
    IL_0105: stloc.2
    IL_0106: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_010B: ldind.i2
    IL_010C: conv.i1
    IL_010D: ldloca.s V_1
    IL_010F: ldloc.2
    IL_0110: dup
    IL_0111: ldc.i4.1
    IL_0112: add
    IL_0113: stloc.2
    IL_0114: call System.Int16& System.Span`1<System.Int16>::get_Item(System.Int32)
    IL_0119: ldind.i2
    IL_011A: conv.i1
    IL_011B: call Z0.Vec128`1<System.SByte> Z0.Vec128::FromParts(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)
    IL_0120: ret

}
Vec128<short> srl(in Vec128<short> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0016: ret

}
Vec128<ushort> srl(in Vec128<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0016: ret

}
Vec128<int> srl(in Vec128<int> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0016: ret

}
Vec128<uint> srl(in Vec128<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0016: ret

}
Vec128<long> srl(in Vec128<long> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0016: ret

}
Vec128<ulong> srl(in Vec128<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0016: ret

}
Vec256<short> srl(in Vec256<short> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: ret

}
Vec256<ushort> srl(in Vec256<ushort> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0016: ret

}
Vec256<int> srl(in Vec256<int> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0016: ret

}
Vec256<uint> srl(in Vec256<uint> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0016: ret

}
Vec256<long> srl(in Vec256<long> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0016: ret

}
Vec256<ulong> srl(in Vec256<ulong> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0016: ret

}
ref Vec256<ushort> convert(in Vec128<byte> src, out Vec256<ushort> dst)
{
    IL_0000: ldarg.1
    IL_0001: ldarg.0
    IL_0002: ldobj Z0.Vec128`1<System.Byte>
    IL_0007: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ConvertToVector256Int16(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.Vector256::AsUInt16<System.Int16>(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: stobj Z0.Vec256`1<System.UInt16>
    IL_0020: ldarg.1
    IL_0021: ret

}
Vec256<byte> srl(in Vec256<byte> src, byte offset)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0007: stloc.s V_12
    IL_0009: ldloca.s V_12
    IL_000B: ldloca.s V_11
    IL_000D: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0012: stloc.0
    IL_0013: ldarg.0
    IL_0014: ldc.i4.1
    IL_0015: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_001A: stloc.s V_14
    IL_001C: ldloca.s V_14
    IL_001E: ldloca.s V_13
    IL_0020: call Z0.Vec256`1<System.UInt16>& Z0.Bits::convert(Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.UInt16>&)
    IL_0025: stloc.1
    IL_0026: ldloc.0
    IL_0027: ldarg.1
    IL_0028: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_002D: stloc.s V_15
    IL_002F: ldloca.s V_15
    IL_0031: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.UInt16>::As<System.Byte>()
    IL_0036: stloc.2
    IL_0037: ldloc.1
    IL_0038: ldarg.1
    IL_0039: call Z0.Vec256`1<System.UInt16> Z0.Bits::srl(Z0.Vec256`1<System.UInt16>&,System.Byte)
    IL_003E: stloc.s V_15
    IL_0040: ldloca.s V_15
    IL_0042: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.UInt16>::As<System.Byte>()
    IL_0047: stloc.3
    IL_0048: call Z0.Vec256`1<System.Byte>& modreq(System.Runtime.InteropServices.InAttribute) Z0.Vec256Pattern::ClearAlt<System.Byte>()
    IL_004D: stloc.s V_4
    IL_004F: ldloca.s V_2
    IL_0051: ldloc.s V_4
    IL_0053: call Z0.Vec256`1<System.Byte> Z0.dinx::shuffle(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0058: stloc.s V_5
    IL_005A: ldloca.s V_3
    IL_005C: ldloc.s V_4
    IL_005E: call Z0.Vec256`1<System.Byte> Z0.dinx::shuffle(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0063: stloc.s V_6
    IL_0065: call Z0.Vec256`1<System.Byte>& modreq(System.Runtime.InteropServices.InAttribute) Z0.Vec256Pattern::LaneMerge<System.Byte>()
    IL_006A: stloc.s V_7
    IL_006C: ldloca.s V_5
    IL_006E: ldloc.s V_7
    IL_0070: call Z0.Vec256`1<System.Byte> Z0.dinx::permute(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0075: stloc.s V_8
    IL_0077: ldloca.s V_6
    IL_0079: ldloc.s V_7
    IL_007B: call Z0.Vec256`1<System.Byte> Z0.dinx::permute(Z0.Vec256`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_0080: stloc.s V_9
    IL_0082: ldloca.s V_10
    IL_0084: initobj Z0.Vec256`1<System.Byte>
    IL_008A: ldloca.s V_8
    IL_008C: ldc.i4.0
    IL_008D: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_0092: stloc.s V_16
    IL_0094: ldloca.s V_16
    IL_0096: ldloca.s V_9
    IL_0098: ldc.i4.0
    IL_0099: call Z0.Vec128`1<System.Byte> Z0.dinx::extract128(Z0.Vec256`1<System.Byte>&,System.Byte)
    IL_009E: stloc.s V_17
    IL_00A0: ldloca.s V_17
    IL_00A2: ldloca.s V_10
    IL_00A4: call Z0.Vec256`1<System.Byte>& Z0.dinx::insert(Z0.Vec128`1<System.Byte>&,Z0.Vec128`1<System.Byte>&,Z0.Vec256`1<System.Byte>&)
    IL_00A9: pop
    IL_00AA: ldloc.s V_10
    IL_00AC: ret

}
Vec128<int> srlv(in Vec128<int> src, in Vec128<uint> control)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> srlv(in Vec128<uint> src, in Vec128<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> srlv(in Vec128<long> src, in Vec128<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> srlv(in Vec128<ulong> src, in Vec128<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec256<int> srlv(in Vec256<int> src, in Vec256<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> srlv(in Vec256<uint> src, in Vec256<uint> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> srlv(in Vec256<long> src, in Vec256<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
Vec256<ulong> srlv(in Vec256<ulong> src, in Vec256<ulong> offset)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
UInt128 xor(in UInt128 lhs, in UInt128 rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.UInt128
    IL_0006: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000B: stloc.0
    IL_000C: ldloca.s V_0
    IL_000E: ldarg.1
    IL_000F: ldobj Z0.UInt128
    IL_0014: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_0019: stloc.1
    IL_001A: ldloca.s V_1
    IL_001C: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0021: stloc.2
    IL_0022: ldloca.s V_2
    IL_0024: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_0029: ret

}
ref UInt128 xor(in UInt128 lhs, in UInt128 rhs, out UInt128 dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldobj Z0.UInt128
    IL_0007: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000C: stloc.0
    IL_000D: ldloca.s V_0
    IL_000F: ldarg.1
    IL_0010: ldobj Z0.UInt128
    IL_0015: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_001A: stloc.1
    IL_001B: ldloca.s V_1
    IL_001D: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0022: stloc.2
    IL_0023: ldloca.s V_2
    IL_0025: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_002A: stobj Z0.UInt128
    IL_002F: ldarg.2
    IL_0030: ret

}
Vec128<byte> xor(in Vec128<byte> lhs, in Vec128<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0020: ret

}
Vec128<short> xor(in Vec128<short> lhs, in Vec128<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0020: ret

}
Vec128<sbyte> xor(in Vec128<sbyte> lhs, in Vec128<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0020: ret

}
Vec128<ushort> xor(in Vec128<ushort> lhs, in Vec128<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0020: ret

}
Vec128<int> xor(in Vec128<int> lhs, in Vec128<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> xor(in Vec128<uint> lhs, in Vec128<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> xor(in Vec128<long> lhs, in Vec128<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> xor(in Vec128<ulong> lhs, in Vec128<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec128<float> xor(in Vec128<float> lhs, in Vec128<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::Xor(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: call Z0.Vec128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_0020: ret

}
Vec128<double> xor(in Vec128<double> lhs, in Vec128<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: call Z0.Vec128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_0020: ret

}
Vec256<byte> xor(in Vec256<byte> lhs, in Vec256<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0020: ret

}
Vec256<short> xor(in Vec256<short> lhs, in Vec256<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0020: ret

}
Vec256<sbyte> xor(in Vec256<sbyte> lhs, in Vec256<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0020: ret

}
Vec256<ushort> xor(in Vec256<ushort> lhs, in Vec256<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0020: ret

}
Vec256<int> xor(in Vec256<int> lhs, in Vec256<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> xor(in Vec256<uint> lhs, in Vec256<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> xor(in Vec256<long> lhs, in Vec256<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
UInt128 and(in UInt128 lhs, in UInt128 rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.UInt128
    IL_0006: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000B: stloc.0
    IL_000C: ldloca.s V_0
    IL_000E: ldarg.1
    IL_000F: ldobj Z0.UInt128
    IL_0014: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_0019: stloc.1
    IL_001A: ldloca.s V_1
    IL_001C: call Z0.Vec128`1<System.UInt64> Z0.Bits::and(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0021: stloc.2
    IL_0022: ldloca.s V_2
    IL_0024: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_0029: ret

}
ref UInt128 and(in UInt128 lhs, in UInt128 rhs, out UInt128 dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldobj Z0.UInt128
    IL_0007: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000C: stloc.0
    IL_000D: ldloca.s V_0
    IL_000F: ldarg.1
    IL_0010: ldobj Z0.UInt128
    IL_0015: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_001A: stloc.1
    IL_001B: ldloca.s V_1
    IL_001D: call Z0.Vec128`1<System.UInt64> Z0.Bits::and(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0022: stloc.2
    IL_0023: ldloca.s V_2
    IL_0025: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_002A: stobj Z0.UInt128
    IL_002F: ldarg.2
    IL_0030: ret

}
Vec128<byte> and(in Vec128<byte> lhs, in Vec128<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0020: ret

}
Vec128<short> and(in Vec128<short> lhs, in Vec128<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0020: ret

}
Vec128<sbyte> and(in Vec128<sbyte> lhs, in Vec128<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0020: ret

}
Vec128<ushort> and(in Vec128<ushort> lhs, in Vec128<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0020: ret

}
Vec128<int> and(in Vec128<int> lhs, in Vec128<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> and(in Vec128<uint> lhs, in Vec128<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> and(in Vec128<long> lhs, in Vec128<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> and(in Vec128<ulong> lhs, in Vec128<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec128<float> and(in Vec128<float> lhs, in Vec128<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::And(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: call Z0.Vec128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_0020: ret

}
Vec128<double> and(in Vec128<double> lhs, in Vec128<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::And(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: call Z0.Vec128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_0020: ret

}
Vec256<byte> and(in Vec256<byte> lhs, in Vec256<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0020: ret

}
Vec256<short> and(in Vec256<short> lhs, in Vec256<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0020: ret

}
Vec256<sbyte> and(in Vec256<sbyte> lhs, in Vec256<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0020: ret

}
Vec256<ushort> and(in Vec256<ushort> lhs, in Vec256<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0020: ret

}
Vec256<int> and(in Vec256<int> lhs, in Vec256<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> and(in Vec256<uint> lhs, in Vec256<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> and(in Vec256<long> lhs, in Vec256<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
Vec256<ulong> and(in Vec256<ulong> lhs, in Vec256<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::And(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
Vec256<float> and(in Vec256<float> lhs, in Vec256<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::And(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: call Z0.Vec256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_0020: ret

}
Vec256<double> and(in Vec256<double> lhs, in Vec256<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::And(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: call Z0.Vec256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_0020: ret

}
Vec128<sbyte> andn(in Vec128<sbyte> lhs, in Vec128<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0020: ret

}
Vec128<byte> andn(in Vec128<byte> lhs, in Vec128<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0020: ret

}
Vec128<short> andn(in Vec128<short> lhs, in Vec128<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0020: ret

}
Vec128<ushort> andn(in Vec128<ushort> lhs, in Vec128<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0020: ret

}
Vec128<int> andn(in Vec128<int> lhs, in Vec128<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> andn(in Vec128<uint> lhs, in Vec128<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> andn(in Vec128<long> lhs, in Vec128<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> andn(in Vec128<ulong> lhs, in Vec128<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec128<float> andn(in Vec128<float> lhs, in Vec128<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: call Z0.Vec128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_0020: ret

}
Vec128<double> andn(in Vec128<double> lhs, in Vec128<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::AndNot(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: call Z0.Vec128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_0020: ret

}
Vec256<sbyte> andn(in Vec256<sbyte> lhs, in Vec256<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0020: ret

}
Vec256<byte> andn(in Vec256<byte> lhs, in Vec256<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0020: ret

}
Vec256<short> andn(in Vec256<short> lhs, in Vec256<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0020: ret

}
Vec256<ushort> andn(in Vec256<ushort> lhs, in Vec256<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0020: ret

}
Vec256<int> andn(in Vec256<int> lhs, in Vec256<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0020: ret

}
Vec256<uint> andn(in Vec256<uint> lhs, in Vec256<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0020: ret

}
Vec256<long> andn(in Vec256<long> lhs, in Vec256<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0020: ret

}
Vec256<ulong> andn(in Vec256<ulong> lhs, in Vec256<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::AndNot(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0020: ret

}
Vec256<float> andn(in Vec256<float> lhs, in Vec256<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Single> System.Runtime.Intrinsics.X86.Avx::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: call Z0.Vec256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_0020: ret

}
Vec256<double> andn(in Vec256<double> lhs, in Vec256<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Double> System.Runtime.Intrinsics.X86.Avx::AndNot(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: call Z0.Vec256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_0020: ret

}
UInt128 bslli(UInt128 src, byte bytes)
{
    IL_0000: ldarga.s src
    IL_0002: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.UInt128::op_Implicit(Z0.UInt128&)
    IL_0007: ldarg.1
    IL_0008: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Byte)
    IL_000D: stloc.0
    IL_000E: ldloca.s V_0
    IL_0010: call Z0.UInt128 Z0.UInt128X::ToUInt128(System.Runtime.Intrinsics.Vector128`1<System.UInt64>&)
    IL_0015: ret

}
Vec128<short> bslli(in Vec128<short> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0016: ret

}
Vec128<ushort> bslli(in Vec128<ushort> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0016: ret

}
Vec128<int> bslli(in Vec128<int> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0016: ret

}
Vec128<uint> bslli(in Vec128<uint> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0016: ret

}
Vec128<long> bslli(in Vec128<long> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0016: ret

}
Vec128<ulong> bslli(in Vec128<ulong> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0016: ret

}
Vec256<short> bslli(in Vec256<short> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: ret

}
Vec256<ushort> bslli(in Vec256<ushort> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0016: ret

}
Vec256<int> bslli(in Vec256<int> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0016: ret

}
Vec256<uint> bslli(in Vec256<uint> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0016: ret

}
Vec256<long> bslli(in Vec256<long> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0016: ret

}
Vec256<ulong> bslli(in Vec256<ulong> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0016: ret

}
Vec128<short> bsrli(in Vec128<short> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0016: ret

}
Vec128<ushort> bsrli(in Vec128<ushort> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0016: ret

}
Vec128<int> bsrli(in Vec128<int> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0016: ret

}
Vec128<uint> bsrli(in Vec128<uint> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0016: ret

}
Vec128<long> bsrli(in Vec128<long> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0016: ret

}
Vec128<ulong> bsrli(in Vec128<ulong> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0016: ret

}
Vec256<short> bsrli(in Vec256<short> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0016: ret

}
Vec256<ushort> bsrli(in Vec256<ushort> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0016: ret

}
Vec256<int> bsrli(in Vec256<int> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0016: ret

}
Vec256<uint> bsrli(in Vec256<uint> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0016: ret

}
Vec256<long> bsrli(in Vec256<long> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0016: ret

}
Vec256<ulong> bsrli(in Vec256<ulong> src, byte bytes)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Byte)
    IL_0011: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0016: ret

}
BitVector128 clmul_ref(BitVector64 x, BitVector64 y)
{
    IL_0000: ldarg.0
    IL_0001: stloc.0
    IL_0002: ldarg.1
    IL_0003: stloc.1
    IL_0004: ldsfld Z0.BitVector128 Z0.BitVector128::Zero
    IL_0009: stloc.2
    IL_000A: ldsfld Z0.BitVector128 Z0.BitVector128::Zero
    IL_000F: stloc.3
    IL_0010: ldc.i4.0
    IL_0011: stloc.s V_4
    IL_0013: br IL_00BE
    IL_0018: ldloca.s V_3
    IL_001A: ldloc.s V_4
    IL_001C: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0021: ldloca.s V_0
    IL_0023: ldc.i4.0
    IL_0024: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0029: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_002E: ldloca.s V_1
    IL_0030: ldloc.s V_4
    IL_0032: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0037: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_003C: call Z0.Bit Z0.Bit::op_BitwiseAnd(Z0.Bit,Z0.Bit)
    IL_0041: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_0046: ldc.i4.1
    IL_0047: stloc.s V_5
    IL_0049: br.s IL_0096
    IL_004B: ldloca.s V_3
    IL_004D: ldloc.s V_4
    IL_004F: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0054: ldloca.s V_3
    IL_0056: ldloc.s V_4
    IL_0058: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_005D: call Z0.Bit Z0.BitVector128::get_Item(Z0.BitPos)
    IL_0062: ldloca.s V_0
    IL_0064: ldloc.s V_5
    IL_0066: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_006B: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_0070: ldloca.s V_1
    IL_0072: ldloc.s V_4
    IL_0074: ldloc.s V_5
    IL_0076: sub
    IL_0077: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_007C: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_0081: call Z0.Bit Z0.Bit::op_BitwiseAnd(Z0.Bit,Z0.Bit)
    IL_0086: call Z0.Bit Z0.Bit::op_ExclusiveOr(Z0.Bit,Z0.Bit)
    IL_008B: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_0090: ldloc.s V_5
    IL_0092: ldc.i4.1
    IL_0093: add
    IL_0094: stloc.s V_5
    IL_0096: ldloc.s V_5
    IL_0098: ldloc.s V_4
    IL_009A: ble.s IL_004B
    IL_009C: ldloca.s V_2
    IL_009E: ldloc.s V_4
    IL_00A0: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_00A5: ldloca.s V_3
    IL_00A7: ldloc.s V_4
    IL_00A9: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_00AE: call Z0.Bit Z0.BitVector128::get_Item(Z0.BitPos)
    IL_00B3: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_00B8: ldloc.s V_4
    IL_00BA: ldc.i4.1
    IL_00BB: add
    IL_00BC: stloc.s V_4
    IL_00BE: ldloc.s V_4
    IL_00C0: ldc.i4.s 64
    IL_00C2: blt IL_0018
    IL_00C7: ldc.i4.s 64
    IL_00C9: stloc.s V_6
    IL_00CB: br IL_0160
    IL_00D0: ldloca.s V_3
    IL_00D2: ldloc.s V_6
    IL_00D4: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_00D9: ldc.i4.0
    IL_00DA: call Z0.Bit Z0.Bit::op_Implicit(System.Int32)
    IL_00DF: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_00E4: ldloc.s V_6
    IL_00E6: ldc.i4.s 63
    IL_00E8: sub
    IL_00E9: stloc.s V_7
    IL_00EB: br.s IL_0138
    IL_00ED: ldloca.s V_3
    IL_00EF: ldloc.s V_6
    IL_00F1: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_00F6: ldloca.s V_3
    IL_00F8: ldloc.s V_6
    IL_00FA: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_00FF: call Z0.Bit Z0.BitVector128::get_Item(Z0.BitPos)
    IL_0104: ldloca.s V_0
    IL_0106: ldloc.s V_7
    IL_0108: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_010D: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_0112: ldloca.s V_1
    IL_0114: ldloc.s V_6
    IL_0116: ldloc.s V_7
    IL_0118: sub
    IL_0119: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_011E: call Z0.Bit Z0.BitVector64::get_Item(Z0.BitPos)
    IL_0123: call Z0.Bit Z0.Bit::op_BitwiseAnd(Z0.Bit,Z0.Bit)
    IL_0128: call Z0.Bit Z0.Bit::op_ExclusiveOr(Z0.Bit,Z0.Bit)
    IL_012D: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_0132: ldloc.s V_7
    IL_0134: ldc.i4.1
    IL_0135: add
    IL_0136: stloc.s V_7
    IL_0138: ldloc.s V_7
    IL_013A: ldc.i4.s 64
    IL_013C: blt.s IL_00ED
    IL_013E: ldloca.s V_2
    IL_0140: ldloc.s V_6
    IL_0142: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0147: ldloca.s V_3
    IL_0149: ldloc.s V_6
    IL_014B: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0150: call Z0.Bit Z0.BitVector128::get_Item(Z0.BitPos)
    IL_0155: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_015A: ldloc.s V_6
    IL_015C: ldc.i4.1
    IL_015D: add
    IL_015E: stloc.s V_6
    IL_0160: ldloc.s V_6
    IL_0162: ldc.i4 128
    IL_0167: blt IL_00D0
    IL_016C: ldloca.s V_2
    IL_016E: ldc.i4.s 127
    IL_0170: call Z0.BitPos Z0.BitPos::op_Implicit(System.Int32)
    IL_0175: ldc.i4.0
    IL_0176: call Z0.Bit Z0.Bit::op_Implicit(System.Int32)
    IL_017B: call System.Void Z0.BitVector128::set_Item(Z0.BitPos,Z0.Bit)
    IL_0180: ldloc.2
    IL_0181: ret

}
BitVector8 clmulr(BitVector8 a, BitVector8 b, BitVector16 poly)
{
    IL_0000: ldarg.0
    IL_0001: call System.Byte Z0.BitVector8::op_Implicit(Z0.BitVector8)
    IL_0006: ldarg.1
    IL_0007: call System.Byte Z0.BitVector8::op_Implicit(Z0.BitVector8)
    IL_000C: call System.UInt16 Z0.dinx::clmul(System.Byte,System.Byte)
    IL_0011: stloc.0
    IL_0012: ldloc.0
    IL_0013: ldloc.0
    IL_0014: ldc.i4.8
    IL_0015: shr
    IL_0016: conv.u2
    IL_0017: ldarg.2
    IL_0018: call System.UInt16 Z0.BitVector16::op_Implicit(Z0.BitVector16)
    IL_001D: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0022: conv.u2
    IL_0023: xor
    IL_0024: conv.u2
    IL_0025: stloc.0
    IL_0026: ldloc.0
    IL_0027: ldloc.0
    IL_0028: ldc.i4.8
    IL_0029: shr
    IL_002A: conv.u2
    IL_002B: ldarg.2
    IL_002C: call System.UInt16 Z0.BitVector16::op_Implicit(Z0.BitVector16)
    IL_0031: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0036: conv.u2
    IL_0037: xor
    IL_0038: conv.u2
    IL_0039: stloc.0
    IL_003A: ldloc.0
    IL_003B: conv.u1
    IL_003C: call Z0.BitVector8 Z0.BitVector8::op_Implicit(System.Byte)
    IL_0041: ret

}
byte clmulr(byte a, byte b, ushort poly)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt16 Z0.dinx::clmul(System.Byte,System.Byte)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldc.i4.8
    IL_000B: shr
    IL_000C: conv.u2
    IL_000D: ldarg.2
    IL_000E: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0013: conv.u2
    IL_0014: xor
    IL_0015: conv.u2
    IL_0016: stloc.0
    IL_0017: ldloc.0
    IL_0018: ldloc.0
    IL_0019: ldc.i4.8
    IL_001A: shr
    IL_001B: conv.u2
    IL_001C: ldarg.2
    IL_001D: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0022: conv.u2
    IL_0023: xor
    IL_0024: conv.u2
    IL_0025: stloc.0
    IL_0026: ldloc.0
    IL_0027: conv.u1
    IL_0028: ret

}
ushort clmulr(ushort a, ushort b, uint poly)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldc.i4.s 16
    IL_000C: shr.un
    IL_000D: ldarg.2
    IL_000E: call System.UInt64 Z0.dinx::clmul(System.UInt32,System.UInt32)
    IL_0013: conv.u4
    IL_0014: xor
    IL_0015: stloc.0
    IL_0016: ldloc.0
    IL_0017: ldloc.0
    IL_0018: ldc.i4.s 16
    IL_001A: shr.un
    IL_001B: ldarg.2
    IL_001C: call System.UInt64 Z0.dinx::clmul(System.UInt32,System.UInt32)
    IL_0021: conv.u4
    IL_0022: xor
    IL_0023: stloc.0
    IL_0024: ldloc.0
    IL_0025: conv.u2
    IL_0026: ret

}
BitVector16 clmulr(BitVector16 a, BitVector16 b, BitVector32 poly)
{
    IL_0000: ldarg.0
    IL_0001: call System.UInt16 Z0.BitVector16::op_Implicit(Z0.BitVector16)
    IL_0006: ldarg.1
    IL_0007: call System.UInt16 Z0.BitVector16::op_Implicit(Z0.BitVector16)
    IL_000C: call System.UInt32 Z0.dinx::clmul(System.UInt16,System.UInt16)
    IL_0011: stloc.0
    IL_0012: ldloc.0
    IL_0013: ldloc.0
    IL_0014: ldc.i4.s 16
    IL_0016: shr.un
    IL_0017: ldarg.2
    IL_0018: call System.UInt32 Z0.BitVector32::op_Implicit(Z0.BitVector32)
    IL_001D: call System.UInt64 Z0.dinx::clmul(System.UInt32,System.UInt32)
    IL_0022: conv.u4
    IL_0023: xor
    IL_0024: stloc.0
    IL_0025: ldloc.0
    IL_0026: ldloc.0
    IL_0027: ldc.i4.s 16
    IL_0029: shr.un
    IL_002A: ldarg.2
    IL_002B: call System.UInt32 Z0.BitVector32::op_Implicit(Z0.BitVector32)
    IL_0030: call System.UInt64 Z0.dinx::clmul(System.UInt32,System.UInt32)
    IL_0035: conv.u4
    IL_0036: xor
    IL_0037: stloc.0
    IL_0038: ldloc.0
    IL_0039: conv.u2
    IL_003A: call Z0.BitVector16 Z0.BitVector16::op_Implicit(System.UInt16)
    IL_003F: ret

}
uint clmulr(uint a, uint b, ulong poly)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call System.UInt64 Z0.dinx::clmul(System.UInt32,System.UInt32)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: ldloc.0
    IL_000A: ldc.i4.s 32
    IL_000C: shr.un
    IL_000D: ldarg.2
    IL_000E: call Z0.UInt128 Z0.dinx::clmul(System.UInt64,System.UInt64)
    IL_0013: ldfld System.UInt64 Z0.UInt128::lo
    IL_0018: xor
    IL_0019: stloc.0
    IL_001A: ldloc.0
    IL_001B: ldloc.0
    IL_001C: ldc.i4.s 32
    IL_001E: shr.un
    IL_001F: ldarg.2
    IL_0020: call Z0.UInt128 Z0.dinx::clmul(System.UInt64,System.UInt64)
    IL_0025: ldfld System.UInt64 Z0.UInt128::lo
    IL_002A: xor
    IL_002B: stloc.0
    IL_002C: ldloc.0
    IL_002D: conv.u4
    IL_002E: ret

}
BitVector128 clmul(BitVector64 lhs, BitVector64 rhs)
{
    IL_0000: ldarga.s lhs
    IL_0002: call System.UInt64 Z0.BitVector64::get_Scalar()
    IL_0007: stloc.2
    IL_0008: ldloca.s V_2
    IL_000A: call Z0.Vec128`1<System.UInt64> Z0.Vec128::LoadScalar<System.UInt64>(System.UInt64&)
    IL_000F: stloc.0
    IL_0010: ldarga.s rhs
    IL_0012: call System.UInt64 Z0.BitVector64::get_Scalar()
    IL_0017: stloc.2
    IL_0018: ldloca.s V_2
    IL_001A: call Z0.Vec128`1<System.UInt64> Z0.Vec128::LoadScalar<System.UInt64>(System.UInt64&)
    IL_001F: stloc.1
    IL_0020: ldloca.s V_0
    IL_0022: ldloca.s V_1
    IL_0024: ldc.i4.0
    IL_0025: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&,Z0.ClMulMask)
    IL_002A: call Z0.BitVector128 Z0.BitVector128::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_002F: ret

}
BitVector64 clmulr(BitVector64 a, BitVector64 b, BitVector128 poly)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.BitVector128 Z0.Bits::clmul(Z0.BitVector64,Z0.BitVector64)
    IL_0007: stloc.0
    IL_0008: ldloc.0
    IL_0009: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_000E: stloc.1
    IL_000F: ldloca.s V_1
    IL_0011: ldloc.0
    IL_0012: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_0017: stloc.2
    IL_0018: ldloca.s V_2
    IL_001A: ldc.i4.s 64
    IL_001C: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0021: stloc.3
    IL_0022: ldloca.s V_3
    IL_0024: ldarg.2
    IL_0025: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_002A: stloc.s V_4
    IL_002C: ldloca.s V_4
    IL_002E: ldc.i4.0
    IL_002F: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&,Z0.ClMulMask)
    IL_0034: stloc.s V_5
    IL_0036: ldloca.s V_5
    IL_0038: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_003D: call Z0.BitVector128 Z0.BitVector128::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0042: stloc.0
    IL_0043: ldloc.0
    IL_0044: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_0049: stloc.1
    IL_004A: ldloca.s V_1
    IL_004C: ldloc.0
    IL_004D: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_0052: stloc.2
    IL_0053: ldloca.s V_2
    IL_0055: ldc.i4.s 64
    IL_0057: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_005C: stloc.3
    IL_005D: ldloca.s V_3
    IL_005F: ldarg.2
    IL_0060: call Z0.Vec128`1<System.UInt64> Z0.BitVector128::op_Implicit(Z0.BitVector128)
    IL_0065: stloc.s V_4
    IL_0067: ldloca.s V_4
    IL_0069: ldc.i4.0
    IL_006A: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&,Z0.ClMulMask)
    IL_006F: stloc.s V_5
    IL_0071: ldloca.s V_5
    IL_0073: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0078: call Z0.BitVector128 Z0.BitVector128::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_007D: stloc.0
    IL_007E: ldloc.0
    IL_007F: call Z0.BitVector64 Z0.BitVector128::op_Explicit(Z0.BitVector128)
    IL_0084: ret

}
Scalar128<ulong> clmulr(Scalar128<ulong> a, Scalar128<ulong> b, Vec128<ulong> poly)
{
    IL_0000: ldarg.0
    IL_0001: ldarg.1
    IL_0002: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Scalar128`1<System.UInt64>,Z0.Scalar128`1<System.UInt64>)
    IL_0007: stloc.0
    IL_0008: ldloca.s V_0
    IL_000A: ldloca.s V_0
    IL_000C: ldc.i4.s 64
    IL_000E: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0013: stloc.1
    IL_0014: ldloca.s V_1
    IL_0016: ldarga.s poly
    IL_0018: ldc.i4.0
    IL_0019: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&,Z0.ClMulMask)
    IL_001E: stloc.2
    IL_001F: ldloca.s V_2
    IL_0021: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0026: stloc.0
    IL_0027: ldloca.s V_0
    IL_0029: ldloca.s V_0
    IL_002B: ldc.i4.s 64
    IL_002D: call Z0.Vec128`1<System.UInt64> Z0.Bits::srl(Z0.Vec128`1<System.UInt64>&,System.Byte)
    IL_0032: stloc.1
    IL_0033: ldloca.s V_1
    IL_0035: ldarga.s poly
    IL_0037: ldc.i4.0
    IL_0038: call Z0.Vec128`1<System.UInt64> Z0.dinx::clmul(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&,Z0.ClMulMask)
    IL_003D: stloc.2
    IL_003E: ldloca.s V_2
    IL_0040: call Z0.Vec128`1<System.UInt64> Z0.Bits::xor(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0045: stloc.0
    IL_0046: ldloc.0
    IL_0047: call Z0.Scalar128`1<System.UInt64> Z0.Scalar128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_004C: ret

}
Vec128<sbyte> flip(in Vec128<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.SByte>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_002B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0030: ret

}
Vec128<byte> flip(in Vec128<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.Byte>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_002B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0030: ret

}
Vec128<short> flip(in Vec128<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.Int16>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_002B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0030: ret

}
Vec128<ushort> flip(in Vec128<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.UInt16>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_002B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0030: ret

}
Vec128<int> flip(in Vec128<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.Int32>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_002B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0030: ret

}
Vec128<uint> flip(in Vec128<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec128`1<System.UInt32>
    IL_001C: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0021: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::CompareEqual(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0026: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::Xor(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_002B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0030: ret

}
Vec128<long> flip(in Vec128<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call System.Int64 Z0.Vec128`1<System.Int64>::get_Item(System.Int32)
    IL_0007: not
    IL_0008: ldarg.0
    IL_0009: ldc.i4.1
    IL_000A: call System.Int64 Z0.Vec128`1<System.Int64>::get_Item(System.Int32)
    IL_000F: not
    IL_0010: call Z0.Vec128`1<System.Int64> Z0.Vec128::FromParts(System.Int64,System.Int64)
    IL_0015: ret

}
Vec128<ulong> flip(in Vec128<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldc.i4.0
    IL_0002: call System.UInt64 Z0.Vec128`1<System.UInt64>::get_Item(System.Int32)
    IL_0007: not
    IL_0008: ldarg.0
    IL_0009: ldc.i4.1
    IL_000A: call System.UInt64 Z0.Vec128`1<System.UInt64>::get_Item(System.Int32)
    IL_000F: not
    IL_0010: call Z0.Vec128`1<System.UInt64> Z0.Vec128::FromParts(System.UInt64,System.UInt64)
    IL_0015: ret

}
Vec256<sbyte> flip(in Vec256<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.SByte>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_002B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0030: ret

}
Vec256<byte> flip(in Vec256<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.Byte>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_002B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0030: ret

}
Vec256<short> flip(in Vec256<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.Int16>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_002B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0030: ret

}
Vec256<ushort> flip(in Vec256<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.UInt16>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_002B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0030: ret

}
Vec256<int> flip(in Vec256<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.Int32>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_002B: call Z0.Vec256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_0030: ret

}
Vec256<uint> flip(in Vec256<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.UInt32>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_002B: call Z0.Vec256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_0030: ret

}
Vec256<long> flip(in Vec256<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.Int64>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.Int64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_002B: call Z0.Vec256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_0030: ret

}
Vec256<ulong> flip(in Vec256<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: ldarg.0
    IL_0017: ldobj Z0.Vec256`1<System.UInt64>
    IL_001C: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0021: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::CompareEqual(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0026: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> System.Runtime.Intrinsics.X86.Avx2::Xor(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_002B: call Z0.Vec256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_0030: ret

}
bool nonz(in Vec128<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonzero(in Vec128<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Sse41::TestZ(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<float> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec128<double> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<byte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<sbyte> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<short> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<ushort> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<int> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int32> Z0.Vec256`1<System.Int32>::op_Implicit(Z0.Vec256`1<System.Int32>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Int32>,System.Runtime.Intrinsics.Vector256`1<System.Int32>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<uint> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt32> Z0.Vec256`1<System.UInt32>::op_Implicit(Z0.Vec256`1<System.UInt32>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.UInt32>,System.Runtime.Intrinsics.Vector256`1<System.UInt32>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<long> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int64> Z0.Vec256`1<System.Int64>::op_Implicit(Z0.Vec256`1<System.Int64>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Int64>,System.Runtime.Intrinsics.Vector256`1<System.Int64>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<ulong> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt64> Z0.Vec256`1<System.UInt64>::op_Implicit(Z0.Vec256`1<System.UInt64>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.UInt64>,System.Runtime.Intrinsics.Vector256`1<System.UInt64>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<float> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Single> Z0.Vec256`1<System.Single>::op_Implicit(Z0.Vec256`1<System.Single>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Single>,System.Runtime.Intrinsics.Vector256`1<System.Single>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
bool nonz(in Vec256<double> src)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_000B: ldarg.0
    IL_000C: ldobj Z0.Vec256`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Double> Z0.Vec256`1<System.Double>::op_Implicit(Z0.Vec256`1<System.Double>)
    IL_0016: call System.Boolean System.Runtime.Intrinsics.X86.Avx::TestZ(System.Runtime.Intrinsics.Vector256`1<System.Double>,System.Runtime.Intrinsics.Vector256`1<System.Double>)
    IL_001B: ldc.i4.0
    IL_001C: ceq
    IL_001E: ret

}
UInt128 or(in UInt128 lhs, in UInt128 rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.UInt128
    IL_0006: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000B: stloc.0
    IL_000C: ldloca.s V_0
    IL_000E: ldarg.1
    IL_000F: ldobj Z0.UInt128
    IL_0014: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_0019: stloc.1
    IL_001A: ldloca.s V_1
    IL_001C: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0021: stloc.2
    IL_0022: ldloca.s V_2
    IL_0024: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_0029: ret

}
ref UInt128 or(in UInt128 lhs, in UInt128 rhs, out UInt128 dst)
{
    IL_0000: ldarg.2
    IL_0001: ldarg.0
    IL_0002: ldobj Z0.UInt128
    IL_0007: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_000C: stloc.0
    IL_000D: ldloca.s V_0
    IL_000F: ldarg.1
    IL_0010: ldobj Z0.UInt128
    IL_0015: call Z0.Vec128`1<System.UInt64> Z0.UInt128X::ToVec128(Z0.UInt128)
    IL_001A: stloc.1
    IL_001B: ldloca.s V_1
    IL_001D: call Z0.Vec128`1<System.UInt64> Z0.Bits::or(Z0.Vec128`1<System.UInt64>&,Z0.Vec128`1<System.UInt64>&)
    IL_0022: stloc.2
    IL_0023: ldloca.s V_2
    IL_0025: call Z0.UInt128 Z0.UInt128X::ToUInt128(Z0.Vec128`1<System.UInt64>&)
    IL_002A: stobj Z0.UInt128
    IL_002F: ldarg.2
    IL_0030: ret

}
Vec128<byte> or(in Vec128<byte> lhs, in Vec128<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(Z0.Vec128`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Byte> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.Byte>,System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_001B: call Z0.Vec128`1<System.Byte> Z0.Vec128`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Byte>)
    IL_0020: ret

}
Vec128<short> or(in Vec128<short> lhs, in Vec128<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(Z0.Vec128`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int16> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.Int16>,System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_001B: call Z0.Vec128`1<System.Int16> Z0.Vec128`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int16>)
    IL_0020: ret

}
Vec128<sbyte> or(in Vec128<sbyte> lhs, in Vec128<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(Z0.Vec128`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.SByte> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.SByte>,System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_001B: call Z0.Vec128`1<System.SByte> Z0.Vec128`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.SByte>)
    IL_0020: ret

}
Vec128<ushort> or(in Vec128<ushort> lhs, in Vec128<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(Z0.Vec128`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt16> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.UInt16>,System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_001B: call Z0.Vec128`1<System.UInt16> Z0.Vec128`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt16>)
    IL_0020: ret

}
Vec128<int> or(in Vec128<int> lhs, in Vec128<int> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(Z0.Vec128`1<System.Int32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int32> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.Int32>,System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_001B: call Z0.Vec128`1<System.Int32> Z0.Vec128`1<System.Int32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int32>)
    IL_0020: ret

}
Vec128<uint> or(in Vec128<uint> lhs, in Vec128<uint> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt32>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt32>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(Z0.Vec128`1<System.UInt32>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt32> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.UInt32>,System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_001B: call Z0.Vec128`1<System.UInt32> Z0.Vec128`1<System.UInt32>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt32>)
    IL_0020: ret

}
Vec128<long> or(in Vec128<long> lhs, in Vec128<long> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Int64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Int64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(Z0.Vec128`1<System.Int64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Int64> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.Int64>,System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_001B: call Z0.Vec128`1<System.Int64> Z0.Vec128`1<System.Int64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Int64>)
    IL_0020: ret

}
Vec128<ulong> or(in Vec128<ulong> lhs, in Vec128<ulong> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.UInt64>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.UInt64>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(Z0.Vec128`1<System.UInt64>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.UInt64> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.UInt64>,System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_001B: call Z0.Vec128`1<System.UInt64> Z0.Vec128`1<System.UInt64>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.UInt64>)
    IL_0020: ret

}
Vec128<float> or(in Vec128<float> lhs, in Vec128<float> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Single>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Single>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(Z0.Vec128`1<System.Single>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Single> System.Runtime.Intrinsics.X86.Sse::Or(System.Runtime.Intrinsics.Vector128`1<System.Single>,System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_001B: call Z0.Vec128`1<System.Single> Z0.Vec128`1<System.Single>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Single>)
    IL_0020: ret

}
Vec128<double> or(in Vec128<double> lhs, in Vec128<double> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec128`1<System.Double>
    IL_0006: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec128`1<System.Double>
    IL_0011: call System.Runtime.Intrinsics.Vector128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(Z0.Vec128`1<System.Double>)
    IL_0016: call System.Runtime.Intrinsics.Vector128`1<System.Double> System.Runtime.Intrinsics.X86.Sse2::Or(System.Runtime.Intrinsics.Vector128`1<System.Double>,System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_001B: call Z0.Vec128`1<System.Double> Z0.Vec128`1<System.Double>::op_Implicit(System.Runtime.Intrinsics.Vector128`1<System.Double>)
    IL_0020: ret

}
Vec256<byte> or(in Vec256<byte> lhs, in Vec256<byte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Byte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Byte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(Z0.Vec256`1<System.Byte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Byte> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.Byte>,System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_001B: call Z0.Vec256`1<System.Byte> Z0.Vec256`1<System.Byte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Byte>)
    IL_0020: ret

}
Vec256<short> or(in Vec256<short> lhs, in Vec256<short> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.Int16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.Int16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(Z0.Vec256`1<System.Int16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.Int16> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.Int16>,System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_001B: call Z0.Vec256`1<System.Int16> Z0.Vec256`1<System.Int16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.Int16>)
    IL_0020: ret

}
Vec256<sbyte> or(in Vec256<sbyte> lhs, in Vec256<sbyte> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.SByte>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.SByte>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(Z0.Vec256`1<System.SByte>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.SByte> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.SByte>,System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_001B: call Z0.Vec256`1<System.SByte> Z0.Vec256`1<System.SByte>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.SByte>)
    IL_0020: ret

}
Vec256<ushort> or(in Vec256<ushort> lhs, in Vec256<ushort> rhs)
{
    IL_0000: ldarg.0
    IL_0001: ldobj Z0.Vec256`1<System.UInt16>
    IL_0006: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_000B: ldarg.1
    IL_000C: ldobj Z0.Vec256`1<System.UInt16>
    IL_0011: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(Z0.Vec256`1<System.UInt16>)
    IL_0016: call System.Runtime.Intrinsics.Vector256`1<System.UInt16> System.Runtime.Intrinsics.X86.Avx2::Or(System.Runtime.Intrinsics.Vector256`1<System.UInt16>,System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_001B: call Z0.Vec256`1<System.UInt16> Z0.Vec256`1<System.UInt16>::op_Implicit(System.Runtime.Intrinsics.Vector256`1<System.UInt16>)
    IL_0020: ret

}
